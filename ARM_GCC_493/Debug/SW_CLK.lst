ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"SW_CLK.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.SW_CLK_Start,"ax",%progbits
  19              		.align	2
  20              		.global	SW_CLK_Start
  21              		.thumb
  22              		.thumb_func
  23              		.type	SW_CLK_Start, %function
  24              	SW_CLK_Start:
  25              	.LFB0:
  26              		.file 1 "Generated_Source\\PSoC5\\SW_CLK.c"
   1:Generated_Source\PSoC5/SW_CLK.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/SW_CLK.c **** * File Name: SW_CLK.c
   3:Generated_Source\PSoC5/SW_CLK.c **** * Version 2.20
   4:Generated_Source\PSoC5/SW_CLK.c **** *
   5:Generated_Source\PSoC5/SW_CLK.c **** *  Description:
   6:Generated_Source\PSoC5/SW_CLK.c **** *   This file provides the source code to the API for the clock component.
   7:Generated_Source\PSoC5/SW_CLK.c **** *
   8:Generated_Source\PSoC5/SW_CLK.c **** *  Note:
   9:Generated_Source\PSoC5/SW_CLK.c **** *
  10:Generated_Source\PSoC5/SW_CLK.c **** ********************************************************************************
  11:Generated_Source\PSoC5/SW_CLK.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  12:Generated_Source\PSoC5/SW_CLK.c **** * You may use this file only in accordance with the license, terms, conditions, 
  13:Generated_Source\PSoC5/SW_CLK.c **** * disclaimers, and limitations in the end user license agreement accompanying 
  14:Generated_Source\PSoC5/SW_CLK.c **** * the software package with which this file was provided.
  15:Generated_Source\PSoC5/SW_CLK.c **** *******************************************************************************/
  16:Generated_Source\PSoC5/SW_CLK.c **** 
  17:Generated_Source\PSoC5/SW_CLK.c **** #include <cydevice_trm.h>
  18:Generated_Source\PSoC5/SW_CLK.c **** #include "SW_CLK.h"
  19:Generated_Source\PSoC5/SW_CLK.c **** 
  20:Generated_Source\PSoC5/SW_CLK.c **** /* Clock Distribution registers. */
  21:Generated_Source\PSoC5/SW_CLK.c **** #define CLK_DIST_LD              (* (reg8 *) CYREG_CLKDIST_LD)
  22:Generated_Source\PSoC5/SW_CLK.c **** #define CLK_DIST_BCFG2           (* (reg8 *) CYREG_CLKDIST_BCFG2)
  23:Generated_Source\PSoC5/SW_CLK.c **** #define BCFG2_MASK               (0x80u)
  24:Generated_Source\PSoC5/SW_CLK.c **** #define CLK_DIST_DMASK           (* (reg8 *) CYREG_CLKDIST_DMASK)
  25:Generated_Source\PSoC5/SW_CLK.c **** #define CLK_DIST_AMASK           (* (reg8 *) CYREG_CLKDIST_AMASK)
  26:Generated_Source\PSoC5/SW_CLK.c **** 
  27:Generated_Source\PSoC5/SW_CLK.c **** #define HAS_CLKDIST_LD_DISABLE   (CY_PSOC3 || CY_PSOC5LP)
  28:Generated_Source\PSoC5/SW_CLK.c **** 
  29:Generated_Source\PSoC5/SW_CLK.c **** 
  30:Generated_Source\PSoC5/SW_CLK.c **** /*******************************************************************************
  31:Generated_Source\PSoC5/SW_CLK.c **** * Function Name: SW_CLK_Start
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 2


  32:Generated_Source\PSoC5/SW_CLK.c **** ********************************************************************************
  33:Generated_Source\PSoC5/SW_CLK.c **** *
  34:Generated_Source\PSoC5/SW_CLK.c **** * Summary:
  35:Generated_Source\PSoC5/SW_CLK.c **** *  Starts the clock. Note that on startup, clocks may be already running if the
  36:Generated_Source\PSoC5/SW_CLK.c **** *  "Start on Reset" option is enabled in the DWR.
  37:Generated_Source\PSoC5/SW_CLK.c **** *
  38:Generated_Source\PSoC5/SW_CLK.c **** * Parameters:
  39:Generated_Source\PSoC5/SW_CLK.c **** *  None
  40:Generated_Source\PSoC5/SW_CLK.c **** *
  41:Generated_Source\PSoC5/SW_CLK.c **** * Returns:
  42:Generated_Source\PSoC5/SW_CLK.c **** *  None
  43:Generated_Source\PSoC5/SW_CLK.c **** *
  44:Generated_Source\PSoC5/SW_CLK.c **** *******************************************************************************/
  45:Generated_Source\PSoC5/SW_CLK.c **** void SW_CLK_Start(void) 
  46:Generated_Source\PSoC5/SW_CLK.c **** {
  27              		.loc 1 46 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  47:Generated_Source\PSoC5/SW_CLK.c ****     /* Set the bit to enable the clock. */
  48:Generated_Source\PSoC5/SW_CLK.c ****     SW_CLK_CLKEN |= SW_CLK_CLKEN_MASK;
  37              		.loc 1 48 0
  38 0004 094A     		ldr	r2, .L2
  39 0006 094B     		ldr	r3, .L2
  40 0008 1B78     		ldrb	r3, [r3]
  41 000a DBB2     		uxtb	r3, r3
  42 000c 63F07F03 		orn	r3, r3, #127
  43 0010 DBB2     		uxtb	r3, r3
  44 0012 1370     		strb	r3, [r2]
  49:Generated_Source\PSoC5/SW_CLK.c **** 	SW_CLK_CLKSTBY |= SW_CLK_CLKSTBY_MASK;
  45              		.loc 1 49 0
  46 0014 064A     		ldr	r2, .L2+4
  47 0016 064B     		ldr	r3, .L2+4
  48 0018 1B78     		ldrb	r3, [r3]
  49 001a DBB2     		uxtb	r3, r3
  50 001c 63F07F03 		orn	r3, r3, #127
  51 0020 DBB2     		uxtb	r3, r3
  52 0022 1370     		strb	r3, [r2]
  50:Generated_Source\PSoC5/SW_CLK.c **** }
  53              		.loc 1 50 0
  54 0024 BD46     		mov	sp, r7
  55              		.cfi_def_cfa_register 13
  56              		@ sp needed
  57 0026 5DF8047B 		ldr	r7, [sp], #4
  58              		.cfi_restore 7
  59              		.cfi_def_cfa_offset 0
  60 002a 7047     		bx	lr
  61              	.L3:
  62              		.align	2
  63              	.L2:
  64 002c A2430040 		.word	1073759138
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 3


  65 0030 B2430040 		.word	1073759154
  66              		.cfi_endproc
  67              	.LFE0:
  68              		.size	SW_CLK_Start, .-SW_CLK_Start
  69              		.section	.text.SW_CLK_Stop,"ax",%progbits
  70              		.align	2
  71              		.global	SW_CLK_Stop
  72              		.thumb
  73              		.thumb_func
  74              		.type	SW_CLK_Stop, %function
  75              	SW_CLK_Stop:
  76              	.LFB1:
  51:Generated_Source\PSoC5/SW_CLK.c **** 
  52:Generated_Source\PSoC5/SW_CLK.c **** 
  53:Generated_Source\PSoC5/SW_CLK.c **** /*******************************************************************************
  54:Generated_Source\PSoC5/SW_CLK.c **** * Function Name: SW_CLK_Stop
  55:Generated_Source\PSoC5/SW_CLK.c **** ********************************************************************************
  56:Generated_Source\PSoC5/SW_CLK.c **** *
  57:Generated_Source\PSoC5/SW_CLK.c **** * Summary:
  58:Generated_Source\PSoC5/SW_CLK.c **** *  Stops the clock and returns immediately. This API does not require the
  59:Generated_Source\PSoC5/SW_CLK.c **** *  source clock to be running but may return before the hardware is actually
  60:Generated_Source\PSoC5/SW_CLK.c **** *  disabled. If the settings of the clock are changed after calling this
  61:Generated_Source\PSoC5/SW_CLK.c **** *  function, the clock may glitch when it is started. To avoid the clock
  62:Generated_Source\PSoC5/SW_CLK.c **** *  glitch, use the StopBlock function.
  63:Generated_Source\PSoC5/SW_CLK.c **** *
  64:Generated_Source\PSoC5/SW_CLK.c **** * Parameters:
  65:Generated_Source\PSoC5/SW_CLK.c **** *  None
  66:Generated_Source\PSoC5/SW_CLK.c **** *
  67:Generated_Source\PSoC5/SW_CLK.c **** * Returns:
  68:Generated_Source\PSoC5/SW_CLK.c **** *  None
  69:Generated_Source\PSoC5/SW_CLK.c **** *
  70:Generated_Source\PSoC5/SW_CLK.c **** *******************************************************************************/
  71:Generated_Source\PSoC5/SW_CLK.c **** void SW_CLK_Stop(void) 
  72:Generated_Source\PSoC5/SW_CLK.c **** {
  77              		.loc 1 72 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82 0000 80B4     		push	{r7}
  83              		.cfi_def_cfa_offset 4
  84              		.cfi_offset 7, -4
  85 0002 00AF     		add	r7, sp, #0
  86              		.cfi_def_cfa_register 7
  73:Generated_Source\PSoC5/SW_CLK.c ****     /* Clear the bit to disable the clock. */
  74:Generated_Source\PSoC5/SW_CLK.c ****     SW_CLK_CLKEN &= (uint8)(~SW_CLK_CLKEN_MASK);
  87              		.loc 1 74 0
  88 0004 094A     		ldr	r2, .L5
  89 0006 094B     		ldr	r3, .L5
  90 0008 1B78     		ldrb	r3, [r3]
  91 000a DBB2     		uxtb	r3, r3
  92 000c 03F07F03 		and	r3, r3, #127
  93 0010 DBB2     		uxtb	r3, r3
  94 0012 1370     		strb	r3, [r2]
  75:Generated_Source\PSoC5/SW_CLK.c **** 	SW_CLK_CLKSTBY &= (uint8)(~SW_CLK_CLKSTBY_MASK);
  95              		.loc 1 75 0
  96 0014 064A     		ldr	r2, .L5+4
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 4


  97 0016 064B     		ldr	r3, .L5+4
  98 0018 1B78     		ldrb	r3, [r3]
  99 001a DBB2     		uxtb	r3, r3
 100 001c 03F07F03 		and	r3, r3, #127
 101 0020 DBB2     		uxtb	r3, r3
 102 0022 1370     		strb	r3, [r2]
  76:Generated_Source\PSoC5/SW_CLK.c **** }
 103              		.loc 1 76 0
 104 0024 BD46     		mov	sp, r7
 105              		.cfi_def_cfa_register 13
 106              		@ sp needed
 107 0026 5DF8047B 		ldr	r7, [sp], #4
 108              		.cfi_restore 7
 109              		.cfi_def_cfa_offset 0
 110 002a 7047     		bx	lr
 111              	.L6:
 112              		.align	2
 113              	.L5:
 114 002c A2430040 		.word	1073759138
 115 0030 B2430040 		.word	1073759154
 116              		.cfi_endproc
 117              	.LFE1:
 118              		.size	SW_CLK_Stop, .-SW_CLK_Stop
 119              		.section	.text.SW_CLK_StopBlock,"ax",%progbits
 120              		.align	2
 121              		.global	SW_CLK_StopBlock
 122              		.thumb
 123              		.thumb_func
 124              		.type	SW_CLK_StopBlock, %function
 125              	SW_CLK_StopBlock:
 126              	.LFB2:
  77:Generated_Source\PSoC5/SW_CLK.c **** 
  78:Generated_Source\PSoC5/SW_CLK.c **** 
  79:Generated_Source\PSoC5/SW_CLK.c **** #if(CY_PSOC3 || CY_PSOC5LP)
  80:Generated_Source\PSoC5/SW_CLK.c **** 
  81:Generated_Source\PSoC5/SW_CLK.c **** 
  82:Generated_Source\PSoC5/SW_CLK.c **** /*******************************************************************************
  83:Generated_Source\PSoC5/SW_CLK.c **** * Function Name: SW_CLK_StopBlock
  84:Generated_Source\PSoC5/SW_CLK.c **** ********************************************************************************
  85:Generated_Source\PSoC5/SW_CLK.c **** *
  86:Generated_Source\PSoC5/SW_CLK.c **** * Summary:
  87:Generated_Source\PSoC5/SW_CLK.c **** *  Stops the clock and waits for the hardware to actually be disabled before
  88:Generated_Source\PSoC5/SW_CLK.c **** *  returning. This ensures that the clock is never truncated (high part of the
  89:Generated_Source\PSoC5/SW_CLK.c **** *  cycle will terminate before the clock is disabled and the API returns).
  90:Generated_Source\PSoC5/SW_CLK.c **** *  Note that the source clock must be running or this API will never return as
  91:Generated_Source\PSoC5/SW_CLK.c **** *  a stopped clock cannot be disabled.
  92:Generated_Source\PSoC5/SW_CLK.c **** *
  93:Generated_Source\PSoC5/SW_CLK.c **** * Parameters:
  94:Generated_Source\PSoC5/SW_CLK.c **** *  None
  95:Generated_Source\PSoC5/SW_CLK.c **** *
  96:Generated_Source\PSoC5/SW_CLK.c **** * Returns:
  97:Generated_Source\PSoC5/SW_CLK.c **** *  None
  98:Generated_Source\PSoC5/SW_CLK.c **** *
  99:Generated_Source\PSoC5/SW_CLK.c **** *******************************************************************************/
 100:Generated_Source\PSoC5/SW_CLK.c **** void SW_CLK_StopBlock(void) 
 101:Generated_Source\PSoC5/SW_CLK.c **** {
 127              		.loc 1 101 0
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 5


 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 8
 130              		@ frame_needed = 1, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132 0000 80B4     		push	{r7}
 133              		.cfi_def_cfa_offset 4
 134              		.cfi_offset 7, -4
 135 0002 83B0     		sub	sp, sp, #12
 136              		.cfi_def_cfa_offset 16
 137 0004 00AF     		add	r7, sp, #0
 138              		.cfi_def_cfa_register 7
 102:Generated_Source\PSoC5/SW_CLK.c ****     if ((SW_CLK_CLKEN & SW_CLK_CLKEN_MASK) != 0u)
 139              		.loc 1 102 0
 140 0006 224B     		ldr	r3, .L10
 141 0008 1B78     		ldrb	r3, [r3]
 142 000a DBB2     		uxtb	r3, r3
 143 000c DBB2     		uxtb	r3, r3
 144 000e 5BB2     		sxtb	r3, r3
 145 0010 002B     		cmp	r3, #0
 146 0012 37DA     		bge	.L7
 147              	.LBB2:
 103:Generated_Source\PSoC5/SW_CLK.c ****     {
 104:Generated_Source\PSoC5/SW_CLK.c **** #if HAS_CLKDIST_LD_DISABLE
 105:Generated_Source\PSoC5/SW_CLK.c ****         uint16 oldDivider;
 106:Generated_Source\PSoC5/SW_CLK.c **** 
 107:Generated_Source\PSoC5/SW_CLK.c ****         CLK_DIST_LD = 0u;
 148              		.loc 1 107 0
 149 0014 1F4B     		ldr	r3, .L10+4
 150 0016 0022     		movs	r2, #0
 151 0018 1A70     		strb	r2, [r3]
 108:Generated_Source\PSoC5/SW_CLK.c **** 
 109:Generated_Source\PSoC5/SW_CLK.c ****         /* Clear all the mask bits except ours. */
 110:Generated_Source\PSoC5/SW_CLK.c **** #if defined(SW_CLK__CFG3)
 111:Generated_Source\PSoC5/SW_CLK.c ****         CLK_DIST_AMASK = SW_CLK_CLKEN_MASK;
 112:Generated_Source\PSoC5/SW_CLK.c ****         CLK_DIST_DMASK = 0x00u;
 113:Generated_Source\PSoC5/SW_CLK.c **** #else
 114:Generated_Source\PSoC5/SW_CLK.c ****         CLK_DIST_DMASK = SW_CLK_CLKEN_MASK;
 152              		.loc 1 114 0
 153 001a 1F4B     		ldr	r3, .L10+8
 154 001c 8022     		movs	r2, #128
 155 001e 1A70     		strb	r2, [r3]
 115:Generated_Source\PSoC5/SW_CLK.c ****         CLK_DIST_AMASK = 0x00u;
 156              		.loc 1 115 0
 157 0020 1E4B     		ldr	r3, .L10+12
 158 0022 0022     		movs	r2, #0
 159 0024 1A70     		strb	r2, [r3]
 116:Generated_Source\PSoC5/SW_CLK.c **** #endif /* SW_CLK__CFG3 */
 117:Generated_Source\PSoC5/SW_CLK.c **** 
 118:Generated_Source\PSoC5/SW_CLK.c ****         /* Clear mask of bus clock. */
 119:Generated_Source\PSoC5/SW_CLK.c ****         CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 160              		.loc 1 119 0
 161 0026 1E4A     		ldr	r2, .L10+16
 162 0028 1D4B     		ldr	r3, .L10+16
 163 002a 1B78     		ldrb	r3, [r3]
 164 002c DBB2     		uxtb	r3, r3
 165 002e 03F07F03 		and	r3, r3, #127
 166 0032 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 6


 167 0034 1370     		strb	r3, [r2]
 120:Generated_Source\PSoC5/SW_CLK.c **** 
 121:Generated_Source\PSoC5/SW_CLK.c ****         oldDivider = CY_GET_REG16(SW_CLK_DIV_PTR);
 168              		.loc 1 121 0
 169 0036 1B4B     		ldr	r3, .L10+20
 170 0038 1B88     		ldrh	r3, [r3]	@ movhi
 171 003a FB80     		strh	r3, [r7, #6]	@ movhi
 122:Generated_Source\PSoC5/SW_CLK.c ****         CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 172              		.loc 1 122 0
 173 003c 1A4A     		ldr	r2, .L10+24
 174 003e FB88     		ldrh	r3, [r7, #6]	@ movhi
 175 0040 1380     		strh	r3, [r2]	@ movhi
 123:Generated_Source\PSoC5/SW_CLK.c ****         CLK_DIST_LD = CYCLK_LD_DISABLE | CYCLK_LD_SYNC_EN | CYCLK_LD_LOAD;
 176              		.loc 1 123 0
 177 0042 144B     		ldr	r3, .L10+4
 178 0044 0722     		movs	r2, #7
 179 0046 1A70     		strb	r2, [r3]
 124:Generated_Source\PSoC5/SW_CLK.c **** 
 125:Generated_Source\PSoC5/SW_CLK.c ****         /* Wait for clock to be disabled */
 126:Generated_Source\PSoC5/SW_CLK.c ****         while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 180              		.loc 1 126 0
 181 0048 00BF     		nop
 182              	.L9:
 183              		.loc 1 126 0 is_stmt 0 discriminator 1
 184 004a 124B     		ldr	r3, .L10+4
 185 004c 1B78     		ldrb	r3, [r3]
 186 004e DBB2     		uxtb	r3, r3
 187 0050 03F00103 		and	r3, r3, #1
 188 0054 002B     		cmp	r3, #0
 189 0056 F8D1     		bne	.L9
 127:Generated_Source\PSoC5/SW_CLK.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 128:Generated_Source\PSoC5/SW_CLK.c **** 
 129:Generated_Source\PSoC5/SW_CLK.c ****         /* Clear the bit to disable the clock. */
 130:Generated_Source\PSoC5/SW_CLK.c ****         SW_CLK_CLKEN &= (uint8)(~SW_CLK_CLKEN_MASK);
 190              		.loc 1 130 0 is_stmt 1
 191 0058 0D4A     		ldr	r2, .L10
 192 005a 0D4B     		ldr	r3, .L10
 193 005c 1B78     		ldrb	r3, [r3]
 194 005e DBB2     		uxtb	r3, r3
 195 0060 03F07F03 		and	r3, r3, #127
 196 0064 DBB2     		uxtb	r3, r3
 197 0066 1370     		strb	r3, [r2]
 131:Generated_Source\PSoC5/SW_CLK.c ****         SW_CLK_CLKSTBY &= (uint8)(~SW_CLK_CLKSTBY_MASK);
 198              		.loc 1 131 0
 199 0068 104A     		ldr	r2, .L10+28
 200 006a 104B     		ldr	r3, .L10+28
 201 006c 1B78     		ldrb	r3, [r3]
 202 006e DBB2     		uxtb	r3, r3
 203 0070 03F07F03 		and	r3, r3, #127
 204 0074 DBB2     		uxtb	r3, r3
 205 0076 1370     		strb	r3, [r2]
 132:Generated_Source\PSoC5/SW_CLK.c **** 
 133:Generated_Source\PSoC5/SW_CLK.c **** #if HAS_CLKDIST_LD_DISABLE
 134:Generated_Source\PSoC5/SW_CLK.c ****         /* Clear the disable bit */
 135:Generated_Source\PSoC5/SW_CLK.c ****         CLK_DIST_LD = 0x00u;
 206              		.loc 1 135 0
 207 0078 064B     		ldr	r3, .L10+4
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 7


 208 007a 0022     		movs	r2, #0
 209 007c 1A70     		strb	r2, [r3]
 136:Generated_Source\PSoC5/SW_CLK.c ****         CY_SET_REG16(SW_CLK_DIV_PTR, oldDivider);
 210              		.loc 1 136 0
 211 007e 094A     		ldr	r2, .L10+20
 212 0080 FB88     		ldrh	r3, [r7, #6]	@ movhi
 213 0082 1380     		strh	r3, [r2]	@ movhi
 214              	.L7:
 215              	.LBE2:
 137:Generated_Source\PSoC5/SW_CLK.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 138:Generated_Source\PSoC5/SW_CLK.c ****     }
 139:Generated_Source\PSoC5/SW_CLK.c **** }
 216              		.loc 1 139 0
 217 0084 0C37     		adds	r7, r7, #12
 218              		.cfi_def_cfa_offset 4
 219 0086 BD46     		mov	sp, r7
 220              		.cfi_def_cfa_register 13
 221              		@ sp needed
 222 0088 5DF8047B 		ldr	r7, [sp], #4
 223              		.cfi_restore 7
 224              		.cfi_def_cfa_offset 0
 225 008c 7047     		bx	lr
 226              	.L11:
 227 008e 00BF     		.align	2
 228              	.L10:
 229 0090 A2430040 		.word	1073759138
 230 0094 01400040 		.word	1073758209
 231 0098 10400040 		.word	1073758224
 232 009c 14400040 		.word	1073758228
 233 00a0 08400040 		.word	1073758216
 234 00a4 9C400040 		.word	1073758364
 235 00a8 02400040 		.word	1073758210
 236 00ac B2430040 		.word	1073759154
 237              		.cfi_endproc
 238              	.LFE2:
 239              		.size	SW_CLK_StopBlock, .-SW_CLK_StopBlock
 240              		.section	.text.SW_CLK_StandbyPower,"ax",%progbits
 241              		.align	2
 242              		.global	SW_CLK_StandbyPower
 243              		.thumb
 244              		.thumb_func
 245              		.type	SW_CLK_StandbyPower, %function
 246              	SW_CLK_StandbyPower:
 247              	.LFB3:
 140:Generated_Source\PSoC5/SW_CLK.c **** #endif /* (CY_PSOC3 || CY_PSOC5LP) */
 141:Generated_Source\PSoC5/SW_CLK.c **** 
 142:Generated_Source\PSoC5/SW_CLK.c **** 
 143:Generated_Source\PSoC5/SW_CLK.c **** /*******************************************************************************
 144:Generated_Source\PSoC5/SW_CLK.c **** * Function Name: SW_CLK_StandbyPower
 145:Generated_Source\PSoC5/SW_CLK.c **** ********************************************************************************
 146:Generated_Source\PSoC5/SW_CLK.c **** *
 147:Generated_Source\PSoC5/SW_CLK.c **** * Summary:
 148:Generated_Source\PSoC5/SW_CLK.c **** *  Sets whether the clock is active in standby mode.
 149:Generated_Source\PSoC5/SW_CLK.c **** *
 150:Generated_Source\PSoC5/SW_CLK.c **** * Parameters:
 151:Generated_Source\PSoC5/SW_CLK.c **** *  state:  0 to disable clock during standby, nonzero to enable.
 152:Generated_Source\PSoC5/SW_CLK.c **** *
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 8


 153:Generated_Source\PSoC5/SW_CLK.c **** * Returns:
 154:Generated_Source\PSoC5/SW_CLK.c **** *  None
 155:Generated_Source\PSoC5/SW_CLK.c **** *
 156:Generated_Source\PSoC5/SW_CLK.c **** *******************************************************************************/
 157:Generated_Source\PSoC5/SW_CLK.c **** void SW_CLK_StandbyPower(uint8 state) 
 158:Generated_Source\PSoC5/SW_CLK.c **** {
 248              		.loc 1 158 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 8
 251              		@ frame_needed = 1, uses_anonymous_args = 0
 252              		@ link register save eliminated.
 253 0000 80B4     		push	{r7}
 254              		.cfi_def_cfa_offset 4
 255              		.cfi_offset 7, -4
 256 0002 83B0     		sub	sp, sp, #12
 257              		.cfi_def_cfa_offset 16
 258 0004 00AF     		add	r7, sp, #0
 259              		.cfi_def_cfa_register 7
 260 0006 0346     		mov	r3, r0
 261 0008 FB71     		strb	r3, [r7, #7]
 159:Generated_Source\PSoC5/SW_CLK.c ****     if(state == 0u)
 262              		.loc 1 159 0
 263 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 264 000c 002B     		cmp	r3, #0
 265 000e 08D1     		bne	.L13
 160:Generated_Source\PSoC5/SW_CLK.c ****     {
 161:Generated_Source\PSoC5/SW_CLK.c ****         SW_CLK_CLKSTBY &= (uint8)(~SW_CLK_CLKSTBY_MASK);
 266              		.loc 1 161 0
 267 0010 0A4A     		ldr	r2, .L15
 268 0012 0A4B     		ldr	r3, .L15
 269 0014 1B78     		ldrb	r3, [r3]
 270 0016 DBB2     		uxtb	r3, r3
 271 0018 03F07F03 		and	r3, r3, #127
 272 001c DBB2     		uxtb	r3, r3
 273 001e 1370     		strb	r3, [r2]
 274 0020 07E0     		b	.L12
 275              	.L13:
 162:Generated_Source\PSoC5/SW_CLK.c ****     }
 163:Generated_Source\PSoC5/SW_CLK.c ****     else
 164:Generated_Source\PSoC5/SW_CLK.c ****     {
 165:Generated_Source\PSoC5/SW_CLK.c ****         SW_CLK_CLKSTBY |= SW_CLK_CLKSTBY_MASK;
 276              		.loc 1 165 0
 277 0022 064A     		ldr	r2, .L15
 278 0024 054B     		ldr	r3, .L15
 279 0026 1B78     		ldrb	r3, [r3]
 280 0028 DBB2     		uxtb	r3, r3
 281 002a 63F07F03 		orn	r3, r3, #127
 282 002e DBB2     		uxtb	r3, r3
 283 0030 1370     		strb	r3, [r2]
 284              	.L12:
 166:Generated_Source\PSoC5/SW_CLK.c ****     }
 167:Generated_Source\PSoC5/SW_CLK.c **** }
 285              		.loc 1 167 0
 286 0032 0C37     		adds	r7, r7, #12
 287              		.cfi_def_cfa_offset 4
 288 0034 BD46     		mov	sp, r7
 289              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 9


 290              		@ sp needed
 291 0036 5DF8047B 		ldr	r7, [sp], #4
 292              		.cfi_restore 7
 293              		.cfi_def_cfa_offset 0
 294 003a 7047     		bx	lr
 295              	.L16:
 296              		.align	2
 297              	.L15:
 298 003c B2430040 		.word	1073759154
 299              		.cfi_endproc
 300              	.LFE3:
 301              		.size	SW_CLK_StandbyPower, .-SW_CLK_StandbyPower
 302              		.section	.text.SW_CLK_SetDividerRegister,"ax",%progbits
 303              		.align	2
 304              		.global	SW_CLK_SetDividerRegister
 305              		.thumb
 306              		.thumb_func
 307              		.type	SW_CLK_SetDividerRegister, %function
 308              	SW_CLK_SetDividerRegister:
 309              	.LFB4:
 168:Generated_Source\PSoC5/SW_CLK.c **** 
 169:Generated_Source\PSoC5/SW_CLK.c **** 
 170:Generated_Source\PSoC5/SW_CLK.c **** /*******************************************************************************
 171:Generated_Source\PSoC5/SW_CLK.c **** * Function Name: SW_CLK_SetDividerRegister
 172:Generated_Source\PSoC5/SW_CLK.c **** ********************************************************************************
 173:Generated_Source\PSoC5/SW_CLK.c **** *
 174:Generated_Source\PSoC5/SW_CLK.c **** * Summary:
 175:Generated_Source\PSoC5/SW_CLK.c **** *  Modifies the clock divider and, thus, the frequency. When the clock divider
 176:Generated_Source\PSoC5/SW_CLK.c **** *  register is set to zero or changed from zero, the clock will be temporarily
 177:Generated_Source\PSoC5/SW_CLK.c **** *  disabled in order to change the SSS mode bit. If the clock is enabled when
 178:Generated_Source\PSoC5/SW_CLK.c **** *  SetDividerRegister is called, then the source clock must be running.
 179:Generated_Source\PSoC5/SW_CLK.c **** *
 180:Generated_Source\PSoC5/SW_CLK.c **** * Parameters:
 181:Generated_Source\PSoC5/SW_CLK.c **** *  clkDivider:  Divider register value (0-65,535). This value is NOT the
 182:Generated_Source\PSoC5/SW_CLK.c **** *    divider; the clock hardware divides by clkDivider plus one. For example,
 183:Generated_Source\PSoC5/SW_CLK.c **** *    to divide the clock by 2, this parameter should be set to 1.
 184:Generated_Source\PSoC5/SW_CLK.c **** *  restart:  If nonzero, restarts the clock divider: the current clock cycle
 185:Generated_Source\PSoC5/SW_CLK.c **** *   will be truncated and the new divide value will take effect immediately. If
 186:Generated_Source\PSoC5/SW_CLK.c **** *   zero, the new divide value will take effect at the end of the current clock
 187:Generated_Source\PSoC5/SW_CLK.c **** *   cycle.
 188:Generated_Source\PSoC5/SW_CLK.c **** *
 189:Generated_Source\PSoC5/SW_CLK.c **** * Returns:
 190:Generated_Source\PSoC5/SW_CLK.c **** *  None
 191:Generated_Source\PSoC5/SW_CLK.c **** *
 192:Generated_Source\PSoC5/SW_CLK.c **** *******************************************************************************/
 193:Generated_Source\PSoC5/SW_CLK.c **** void SW_CLK_SetDividerRegister(uint16 clkDivider, uint8 restart)
 194:Generated_Source\PSoC5/SW_CLK.c ****                                 
 195:Generated_Source\PSoC5/SW_CLK.c **** {
 310              		.loc 1 195 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 16
 313              		@ frame_needed = 1, uses_anonymous_args = 0
 314 0000 80B5     		push	{r7, lr}
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 7, -8
 317              		.cfi_offset 14, -4
 318 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 10


 319              		.cfi_def_cfa_offset 24
 320 0004 00AF     		add	r7, sp, #0
 321              		.cfi_def_cfa_register 7
 322 0006 0346     		mov	r3, r0
 323 0008 0A46     		mov	r2, r1
 324 000a FB80     		strh	r3, [r7, #6]	@ movhi
 325 000c 1346     		mov	r3, r2
 326 000e 7B71     		strb	r3, [r7, #5]
 196:Generated_Source\PSoC5/SW_CLK.c ****     uint8 enabled;
 197:Generated_Source\PSoC5/SW_CLK.c **** 
 198:Generated_Source\PSoC5/SW_CLK.c ****     uint8 currSrc = SW_CLK_GetSourceRegister();
 327              		.loc 1 198 0
 328 0010 FFF7FEFF 		bl	SW_CLK_GetSourceRegister
 329 0014 0346     		mov	r3, r0
 330 0016 FB73     		strb	r3, [r7, #15]
 199:Generated_Source\PSoC5/SW_CLK.c ****     uint16 oldDivider = SW_CLK_GetDividerRegister();
 331              		.loc 1 199 0
 332 0018 FFF7FEFF 		bl	SW_CLK_GetDividerRegister
 333 001c 0346     		mov	r3, r0
 334 001e BB81     		strh	r3, [r7, #12]	@ movhi
 200:Generated_Source\PSoC5/SW_CLK.c **** 
 201:Generated_Source\PSoC5/SW_CLK.c ****     if (clkDivider != oldDivider)
 335              		.loc 1 201 0
 336 0020 FA88     		ldrh	r2, [r7, #6]
 337 0022 BB89     		ldrh	r3, [r7, #12]
 338 0024 9A42     		cmp	r2, r3
 339 0026 00F08780 		beq	.L17
 202:Generated_Source\PSoC5/SW_CLK.c ****     {
 203:Generated_Source\PSoC5/SW_CLK.c ****         enabled = SW_CLK_CLKEN & SW_CLK_CLKEN_MASK;
 340              		.loc 1 203 0
 341 002a 454B     		ldr	r3, .L30
 342 002c 1B78     		ldrb	r3, [r3]
 343 002e DBB2     		uxtb	r3, r3
 344 0030 23F07F03 		bic	r3, r3, #127
 345 0034 FB72     		strb	r3, [r7, #11]
 204:Generated_Source\PSoC5/SW_CLK.c **** 
 205:Generated_Source\PSoC5/SW_CLK.c ****         if ((currSrc == (uint8)CYCLK_SRC_SEL_CLK_SYNC_D) && ((oldDivider == 0u) || (clkDivider == 0
 346              		.loc 1 205 0
 347 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 348 0038 002B     		cmp	r3, #0
 349 003a 20D1     		bne	.L19
 350              		.loc 1 205 0 is_stmt 0 discriminator 1
 351 003c BB89     		ldrh	r3, [r7, #12]
 352 003e 002B     		cmp	r3, #0
 353 0040 02D0     		beq	.L20
 354              		.loc 1 205 0 discriminator 2
 355 0042 FB88     		ldrh	r3, [r7, #6]
 356 0044 002B     		cmp	r3, #0
 357 0046 1AD1     		bne	.L19
 358              	.L20:
 206:Generated_Source\PSoC5/SW_CLK.c ****         {
 207:Generated_Source\PSoC5/SW_CLK.c ****             /* Moving to/from SSS requires correct ordering to prevent halting the clock    */
 208:Generated_Source\PSoC5/SW_CLK.c ****             if (oldDivider == 0u)
 359              		.loc 1 208 0 is_stmt 1
 360 0048 BB89     		ldrh	r3, [r7, #12]
 361 004a 002B     		cmp	r3, #0
 362 004c 0BD1     		bne	.L21
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 11


 209:Generated_Source\PSoC5/SW_CLK.c ****             {
 210:Generated_Source\PSoC5/SW_CLK.c ****                 /* Moving away from SSS, set the divider first so when SSS is cleared we    */
 211:Generated_Source\PSoC5/SW_CLK.c ****                 /* don't halt the clock.  Using the shadow load isn't required as the       */
 212:Generated_Source\PSoC5/SW_CLK.c ****                 /* divider is ignored while SSS is set.                                     */
 213:Generated_Source\PSoC5/SW_CLK.c ****                 CY_SET_REG16(SW_CLK_DIV_PTR, clkDivider);
 363              		.loc 1 213 0
 364 004e 3D4A     		ldr	r2, .L30+4
 365 0050 FB88     		ldrh	r3, [r7, #6]	@ movhi
 366 0052 1380     		strh	r3, [r2]	@ movhi
 214:Generated_Source\PSoC5/SW_CLK.c ****                 SW_CLK_MOD_SRC &= (uint8)(~CYCLK_SSS);
 367              		.loc 1 214 0
 368 0054 3C4A     		ldr	r2, .L30+8
 369 0056 3C4B     		ldr	r3, .L30+8
 370 0058 1B78     		ldrb	r3, [r3]
 371 005a DBB2     		uxtb	r3, r3
 372 005c 23F04003 		bic	r3, r3, #64
 373 0060 DBB2     		uxtb	r3, r3
 374 0062 1370     		strb	r3, [r2]
 208:Generated_Source\PSoC5/SW_CLK.c ****             {
 375              		.loc 1 208 0
 376 0064 68E0     		b	.L17
 377              	.L21:
 215:Generated_Source\PSoC5/SW_CLK.c ****             }
 216:Generated_Source\PSoC5/SW_CLK.c ****             else
 217:Generated_Source\PSoC5/SW_CLK.c ****             {
 218:Generated_Source\PSoC5/SW_CLK.c ****                 /* Moving to SSS, set SSS which then ignores the divider and we can set     */
 219:Generated_Source\PSoC5/SW_CLK.c ****                 /* it without bothering with the shadow load.                               */
 220:Generated_Source\PSoC5/SW_CLK.c ****                 SW_CLK_MOD_SRC |= CYCLK_SSS;
 378              		.loc 1 220 0
 379 0066 384A     		ldr	r2, .L30+8
 380 0068 374B     		ldr	r3, .L30+8
 381 006a 1B78     		ldrb	r3, [r3]
 382 006c DBB2     		uxtb	r3, r3
 383 006e 43F04003 		orr	r3, r3, #64
 384 0072 DBB2     		uxtb	r3, r3
 385 0074 1370     		strb	r3, [r2]
 221:Generated_Source\PSoC5/SW_CLK.c ****                 CY_SET_REG16(SW_CLK_DIV_PTR, clkDivider);
 386              		.loc 1 221 0
 387 0076 334A     		ldr	r2, .L30+4
 388 0078 FB88     		ldrh	r3, [r7, #6]	@ movhi
 389 007a 1380     		strh	r3, [r2]	@ movhi
 208:Generated_Source\PSoC5/SW_CLK.c ****             {
 390              		.loc 1 208 0
 391 007c 5CE0     		b	.L17
 392              	.L19:
 222:Generated_Source\PSoC5/SW_CLK.c ****             }
 223:Generated_Source\PSoC5/SW_CLK.c ****         }
 224:Generated_Source\PSoC5/SW_CLK.c ****         else
 225:Generated_Source\PSoC5/SW_CLK.c ****         {
 226:Generated_Source\PSoC5/SW_CLK.c **** 			
 227:Generated_Source\PSoC5/SW_CLK.c ****             if (enabled != 0u)
 393              		.loc 1 227 0
 394 007e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 395 0080 002B     		cmp	r3, #0
 396 0082 33D0     		beq	.L23
 228:Generated_Source\PSoC5/SW_CLK.c ****             {
 229:Generated_Source\PSoC5/SW_CLK.c ****                 CLK_DIST_LD = 0x00u;
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 12


 397              		.loc 1 229 0
 398 0084 314B     		ldr	r3, .L30+12
 399 0086 0022     		movs	r2, #0
 400 0088 1A70     		strb	r2, [r3]
 230:Generated_Source\PSoC5/SW_CLK.c **** 
 231:Generated_Source\PSoC5/SW_CLK.c ****                 /* Clear all the mask bits except ours. */
 232:Generated_Source\PSoC5/SW_CLK.c **** #if defined(SW_CLK__CFG3)
 233:Generated_Source\PSoC5/SW_CLK.c ****                 CLK_DIST_AMASK = SW_CLK_CLKEN_MASK;
 234:Generated_Source\PSoC5/SW_CLK.c ****                 CLK_DIST_DMASK = 0x00u;
 235:Generated_Source\PSoC5/SW_CLK.c **** #else
 236:Generated_Source\PSoC5/SW_CLK.c ****                 CLK_DIST_DMASK = SW_CLK_CLKEN_MASK;
 401              		.loc 1 236 0
 402 008a 314B     		ldr	r3, .L30+16
 403 008c 8022     		movs	r2, #128
 404 008e 1A70     		strb	r2, [r3]
 237:Generated_Source\PSoC5/SW_CLK.c ****                 CLK_DIST_AMASK = 0x00u;
 405              		.loc 1 237 0
 406 0090 304B     		ldr	r3, .L30+20
 407 0092 0022     		movs	r2, #0
 408 0094 1A70     		strb	r2, [r3]
 238:Generated_Source\PSoC5/SW_CLK.c **** #endif /* SW_CLK__CFG3 */
 239:Generated_Source\PSoC5/SW_CLK.c ****                 /* Clear mask of bus clock. */
 240:Generated_Source\PSoC5/SW_CLK.c ****                 CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 409              		.loc 1 240 0
 410 0096 304A     		ldr	r2, .L30+24
 411 0098 2F4B     		ldr	r3, .L30+24
 412 009a 1B78     		ldrb	r3, [r3]
 413 009c DBB2     		uxtb	r3, r3
 414 009e 03F07F03 		and	r3, r3, #127
 415 00a2 DBB2     		uxtb	r3, r3
 416 00a4 1370     		strb	r3, [r2]
 241:Generated_Source\PSoC5/SW_CLK.c **** 
 242:Generated_Source\PSoC5/SW_CLK.c ****                 /* If clock is currently enabled, disable it if async or going from N-to-1*/
 243:Generated_Source\PSoC5/SW_CLK.c ****                 if (((SW_CLK_MOD_SRC & CYCLK_SYNC) == 0u) || (clkDivider == 0u))
 417              		.loc 1 243 0
 418 00a6 284B     		ldr	r3, .L30+8
 419 00a8 1B78     		ldrb	r3, [r3]
 420 00aa DBB2     		uxtb	r3, r3
 421 00ac 03F00803 		and	r3, r3, #8
 422 00b0 002B     		cmp	r3, #0
 423 00b2 02D0     		beq	.L24
 424              		.loc 1 243 0 is_stmt 0 discriminator 1
 425 00b4 FB88     		ldrh	r3, [r7, #6]
 426 00b6 002B     		cmp	r3, #0
 427 00b8 18D1     		bne	.L23
 428              	.L24:
 244:Generated_Source\PSoC5/SW_CLK.c ****                 {
 245:Generated_Source\PSoC5/SW_CLK.c **** #if HAS_CLKDIST_LD_DISABLE
 246:Generated_Source\PSoC5/SW_CLK.c ****                     CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 429              		.loc 1 246 0 is_stmt 1
 430 00ba 284A     		ldr	r2, .L30+28
 431 00bc BB89     		ldrh	r3, [r7, #12]	@ movhi
 432 00be 1380     		strh	r3, [r2]	@ movhi
 247:Generated_Source\PSoC5/SW_CLK.c ****                     CLK_DIST_LD = CYCLK_LD_DISABLE|CYCLK_LD_SYNC_EN|CYCLK_LD_LOAD;
 433              		.loc 1 247 0
 434 00c0 224B     		ldr	r3, .L30+12
 435 00c2 0722     		movs	r2, #7
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 13


 436 00c4 1A70     		strb	r2, [r3]
 248:Generated_Source\PSoC5/SW_CLK.c **** 
 249:Generated_Source\PSoC5/SW_CLK.c ****                     /* Wait for clock to be disabled */
 250:Generated_Source\PSoC5/SW_CLK.c ****                     while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 437              		.loc 1 250 0
 438 00c6 00BF     		nop
 439              	.L25:
 440              		.loc 1 250 0 is_stmt 0 discriminator 1
 441 00c8 204B     		ldr	r3, .L30+12
 442 00ca 1B78     		ldrb	r3, [r3]
 443 00cc DBB2     		uxtb	r3, r3
 444 00ce 03F00103 		and	r3, r3, #1
 445 00d2 002B     		cmp	r3, #0
 446 00d4 F8D1     		bne	.L25
 251:Generated_Source\PSoC5/SW_CLK.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 252:Generated_Source\PSoC5/SW_CLK.c **** 
 253:Generated_Source\PSoC5/SW_CLK.c ****                     SW_CLK_CLKEN &= (uint8)(~SW_CLK_CLKEN_MASK);
 447              		.loc 1 253 0 is_stmt 1
 448 00d6 1A4A     		ldr	r2, .L30
 449 00d8 194B     		ldr	r3, .L30
 450 00da 1B78     		ldrb	r3, [r3]
 451 00dc DBB2     		uxtb	r3, r3
 452 00de 03F07F03 		and	r3, r3, #127
 453 00e2 DBB2     		uxtb	r3, r3
 454 00e4 1370     		strb	r3, [r2]
 254:Generated_Source\PSoC5/SW_CLK.c **** 
 255:Generated_Source\PSoC5/SW_CLK.c **** #if HAS_CLKDIST_LD_DISABLE
 256:Generated_Source\PSoC5/SW_CLK.c ****                     /* Clear the disable bit */
 257:Generated_Source\PSoC5/SW_CLK.c ****                     CLK_DIST_LD = 0x00u;
 455              		.loc 1 257 0
 456 00e6 194B     		ldr	r3, .L30+12
 457 00e8 0022     		movs	r2, #0
 458 00ea 1A70     		strb	r2, [r3]
 459              	.L23:
 258:Generated_Source\PSoC5/SW_CLK.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 259:Generated_Source\PSoC5/SW_CLK.c ****                 }
 260:Generated_Source\PSoC5/SW_CLK.c ****             }
 261:Generated_Source\PSoC5/SW_CLK.c **** 
 262:Generated_Source\PSoC5/SW_CLK.c ****             /* Load divide value. */
 263:Generated_Source\PSoC5/SW_CLK.c ****             if ((SW_CLK_CLKEN & SW_CLK_CLKEN_MASK) != 0u)
 460              		.loc 1 263 0
 461 00ec 144B     		ldr	r3, .L30
 462 00ee 1B78     		ldrb	r3, [r3]
 463 00f0 DBB2     		uxtb	r3, r3
 464 00f2 DBB2     		uxtb	r3, r3
 465 00f4 5BB2     		sxtb	r3, r3
 466 00f6 002B     		cmp	r3, #0
 467 00f8 13DA     		bge	.L26
 264:Generated_Source\PSoC5/SW_CLK.c ****             {
 265:Generated_Source\PSoC5/SW_CLK.c ****                 /* If the clock is still enabled, use the shadow registers */
 266:Generated_Source\PSoC5/SW_CLK.c ****                 CY_SET_REG16(CYREG_CLKDIST_WRK0, clkDivider);
 468              		.loc 1 266 0
 469 00fa 184A     		ldr	r2, .L30+28
 470 00fc FB88     		ldrh	r3, [r7, #6]	@ movhi
 471 00fe 1380     		strh	r3, [r2]	@ movhi
 267:Generated_Source\PSoC5/SW_CLK.c **** 
 268:Generated_Source\PSoC5/SW_CLK.c ****                 CLK_DIST_LD = (CYCLK_LD_LOAD | ((restart != 0u) ? CYCLK_LD_SYNC_EN : 0x00u));
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 14


 472              		.loc 1 268 0
 473 0100 124A     		ldr	r2, .L30+12
 474 0102 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 475 0104 002B     		cmp	r3, #0
 476 0106 01D0     		beq	.L27
 477              		.loc 1 268 0 is_stmt 0 discriminator 1
 478 0108 0323     		movs	r3, #3
 479 010a 00E0     		b	.L28
 480              	.L27:
 481              		.loc 1 268 0 discriminator 2
 482 010c 0123     		movs	r3, #1
 483              	.L28:
 484              		.loc 1 268 0 discriminator 4
 485 010e 1370     		strb	r3, [r2]
 269:Generated_Source\PSoC5/SW_CLK.c ****                 while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 486              		.loc 1 269 0 is_stmt 1 discriminator 4
 487 0110 00BF     		nop
 488              	.L29:
 489              		.loc 1 269 0 is_stmt 0 discriminator 1
 490 0112 0E4B     		ldr	r3, .L30+12
 491 0114 1B78     		ldrb	r3, [r3]
 492 0116 DBB2     		uxtb	r3, r3
 493 0118 03F00103 		and	r3, r3, #1
 494 011c 002B     		cmp	r3, #0
 495 011e F8D1     		bne	.L29
 496 0120 0AE0     		b	.L17
 497              	.L26:
 270:Generated_Source\PSoC5/SW_CLK.c ****             }
 271:Generated_Source\PSoC5/SW_CLK.c ****             else
 272:Generated_Source\PSoC5/SW_CLK.c ****             {
 273:Generated_Source\PSoC5/SW_CLK.c ****                 /* If the clock is disabled, set the divider directly */
 274:Generated_Source\PSoC5/SW_CLK.c ****                 CY_SET_REG16(SW_CLK_DIV_PTR, clkDivider);
 498              		.loc 1 274 0 is_stmt 1
 499 0122 084A     		ldr	r2, .L30+4
 500 0124 FB88     		ldrh	r3, [r7, #6]	@ movhi
 501 0126 1380     		strh	r3, [r2]	@ movhi
 275:Generated_Source\PSoC5/SW_CLK.c **** 				SW_CLK_CLKEN |= enabled;
 502              		.loc 1 275 0
 503 0128 0549     		ldr	r1, .L30
 504 012a 054B     		ldr	r3, .L30
 505 012c 1B78     		ldrb	r3, [r3]
 506 012e DAB2     		uxtb	r2, r3
 507 0130 FB7A     		ldrb	r3, [r7, #11]
 508 0132 1343     		orrs	r3, r3, r2
 509 0134 DBB2     		uxtb	r3, r3
 510 0136 0B70     		strb	r3, [r1]
 511              	.L17:
 276:Generated_Source\PSoC5/SW_CLK.c ****             }
 277:Generated_Source\PSoC5/SW_CLK.c ****         }
 278:Generated_Source\PSoC5/SW_CLK.c ****     }
 279:Generated_Source\PSoC5/SW_CLK.c **** }
 512              		.loc 1 279 0
 513 0138 1037     		adds	r7, r7, #16
 514              		.cfi_def_cfa_offset 8
 515 013a BD46     		mov	sp, r7
 516              		.cfi_def_cfa_register 13
 517              		@ sp needed
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 15


 518 013c 80BD     		pop	{r7, pc}
 519              	.L31:
 520 013e 00BF     		.align	2
 521              	.L30:
 522 0140 A2430040 		.word	1073759138
 523 0144 9C400040 		.word	1073758364
 524 0148 9E400040 		.word	1073758366
 525 014c 01400040 		.word	1073758209
 526 0150 10400040 		.word	1073758224
 527 0154 14400040 		.word	1073758228
 528 0158 08400040 		.word	1073758216
 529 015c 02400040 		.word	1073758210
 530              		.cfi_endproc
 531              	.LFE4:
 532              		.size	SW_CLK_SetDividerRegister, .-SW_CLK_SetDividerRegister
 533              		.section	.text.SW_CLK_GetDividerRegister,"ax",%progbits
 534              		.align	2
 535              		.global	SW_CLK_GetDividerRegister
 536              		.thumb
 537              		.thumb_func
 538              		.type	SW_CLK_GetDividerRegister, %function
 539              	SW_CLK_GetDividerRegister:
 540              	.LFB5:
 280:Generated_Source\PSoC5/SW_CLK.c **** 
 281:Generated_Source\PSoC5/SW_CLK.c **** 
 282:Generated_Source\PSoC5/SW_CLK.c **** /*******************************************************************************
 283:Generated_Source\PSoC5/SW_CLK.c **** * Function Name: SW_CLK_GetDividerRegister
 284:Generated_Source\PSoC5/SW_CLK.c **** ********************************************************************************
 285:Generated_Source\PSoC5/SW_CLK.c **** *
 286:Generated_Source\PSoC5/SW_CLK.c **** * Summary:
 287:Generated_Source\PSoC5/SW_CLK.c **** *  Gets the clock divider register value.
 288:Generated_Source\PSoC5/SW_CLK.c **** *
 289:Generated_Source\PSoC5/SW_CLK.c **** * Parameters:
 290:Generated_Source\PSoC5/SW_CLK.c **** *  None
 291:Generated_Source\PSoC5/SW_CLK.c **** *
 292:Generated_Source\PSoC5/SW_CLK.c **** * Returns:
 293:Generated_Source\PSoC5/SW_CLK.c **** *  Divide value of the clock minus 1. For example, if the clock is set to
 294:Generated_Source\PSoC5/SW_CLK.c **** *  divide by 2, the return value will be 1.
 295:Generated_Source\PSoC5/SW_CLK.c **** *
 296:Generated_Source\PSoC5/SW_CLK.c **** *******************************************************************************/
 297:Generated_Source\PSoC5/SW_CLK.c **** uint16 SW_CLK_GetDividerRegister(void) 
 298:Generated_Source\PSoC5/SW_CLK.c **** {
 541              		.loc 1 298 0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 0
 544              		@ frame_needed = 1, uses_anonymous_args = 0
 545              		@ link register save eliminated.
 546 0000 80B4     		push	{r7}
 547              		.cfi_def_cfa_offset 4
 548              		.cfi_offset 7, -4
 549 0002 00AF     		add	r7, sp, #0
 550              		.cfi_def_cfa_register 7
 299:Generated_Source\PSoC5/SW_CLK.c ****     return CY_GET_REG16(SW_CLK_DIV_PTR);
 551              		.loc 1 299 0
 552 0004 034B     		ldr	r3, .L34
 553 0006 1B88     		ldrh	r3, [r3]	@ movhi
 554 0008 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 16


 300:Generated_Source\PSoC5/SW_CLK.c **** }
 555              		.loc 1 300 0
 556 000a 1846     		mov	r0, r3
 557 000c BD46     		mov	sp, r7
 558              		.cfi_def_cfa_register 13
 559              		@ sp needed
 560 000e 5DF8047B 		ldr	r7, [sp], #4
 561              		.cfi_restore 7
 562              		.cfi_def_cfa_offset 0
 563 0012 7047     		bx	lr
 564              	.L35:
 565              		.align	2
 566              	.L34:
 567 0014 9C400040 		.word	1073758364
 568              		.cfi_endproc
 569              	.LFE5:
 570              		.size	SW_CLK_GetDividerRegister, .-SW_CLK_GetDividerRegister
 571              		.section	.text.SW_CLK_SetModeRegister,"ax",%progbits
 572              		.align	2
 573              		.global	SW_CLK_SetModeRegister
 574              		.thumb
 575              		.thumb_func
 576              		.type	SW_CLK_SetModeRegister, %function
 577              	SW_CLK_SetModeRegister:
 578              	.LFB6:
 301:Generated_Source\PSoC5/SW_CLK.c **** 
 302:Generated_Source\PSoC5/SW_CLK.c **** 
 303:Generated_Source\PSoC5/SW_CLK.c **** /*******************************************************************************
 304:Generated_Source\PSoC5/SW_CLK.c **** * Function Name: SW_CLK_SetModeRegister
 305:Generated_Source\PSoC5/SW_CLK.c **** ********************************************************************************
 306:Generated_Source\PSoC5/SW_CLK.c **** *
 307:Generated_Source\PSoC5/SW_CLK.c **** * Summary:
 308:Generated_Source\PSoC5/SW_CLK.c **** *  Sets flags that control the operating mode of the clock. This function only
 309:Generated_Source\PSoC5/SW_CLK.c **** *  changes flags from 0 to 1; flags that are already 1 will remain unchanged.
 310:Generated_Source\PSoC5/SW_CLK.c **** *  To clear flags, use the ClearModeRegister function. The clock must be
 311:Generated_Source\PSoC5/SW_CLK.c **** *  disabled before changing the mode.
 312:Generated_Source\PSoC5/SW_CLK.c **** *
 313:Generated_Source\PSoC5/SW_CLK.c **** * Parameters:
 314:Generated_Source\PSoC5/SW_CLK.c **** *  clkMode: Bit mask containing the bits to set. For PSoC 3 and PSoC 5,
 315:Generated_Source\PSoC5/SW_CLK.c **** *   clkMode should be a set of the following optional bits or'ed together.
 316:Generated_Source\PSoC5/SW_CLK.c **** *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 317:Generated_Source\PSoC5/SW_CLK.c **** *                 occur when the divider count reaches half of the divide
 318:Generated_Source\PSoC5/SW_CLK.c **** *                 value.
 319:Generated_Source\PSoC5/SW_CLK.c **** *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 320:Generated_Source\PSoC5/SW_CLK.c **** *                 is asserted for approximately half of its period. When
 321:Generated_Source\PSoC5/SW_CLK.c **** *                 disabled, the output clock is asserted for one period of the
 322:Generated_Source\PSoC5/SW_CLK.c **** *                 source clock.
 323:Generated_Source\PSoC5/SW_CLK.c **** *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 324:Generated_Source\PSoC5/SW_CLK.c **** *                 be enabled for all synchronous clocks.
 325:Generated_Source\PSoC5/SW_CLK.c **** *   See the Technical Reference Manual for details about setting the mode of
 326:Generated_Source\PSoC5/SW_CLK.c **** *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 327:Generated_Source\PSoC5/SW_CLK.c **** *
 328:Generated_Source\PSoC5/SW_CLK.c **** * Returns:
 329:Generated_Source\PSoC5/SW_CLK.c **** *  None
 330:Generated_Source\PSoC5/SW_CLK.c **** *
 331:Generated_Source\PSoC5/SW_CLK.c **** *******************************************************************************/
 332:Generated_Source\PSoC5/SW_CLK.c **** void SW_CLK_SetModeRegister(uint8 modeBitMask) 
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 17


 333:Generated_Source\PSoC5/SW_CLK.c **** {
 579              		.loc 1 333 0
 580              		.cfi_startproc
 581              		@ args = 0, pretend = 0, frame = 8
 582              		@ frame_needed = 1, uses_anonymous_args = 0
 583              		@ link register save eliminated.
 584 0000 80B4     		push	{r7}
 585              		.cfi_def_cfa_offset 4
 586              		.cfi_offset 7, -4
 587 0002 83B0     		sub	sp, sp, #12
 588              		.cfi_def_cfa_offset 16
 589 0004 00AF     		add	r7, sp, #0
 590              		.cfi_def_cfa_register 7
 591 0006 0346     		mov	r3, r0
 592 0008 FB71     		strb	r3, [r7, #7]
 334:Generated_Source\PSoC5/SW_CLK.c ****     SW_CLK_MOD_SRC |= modeBitMask & (uint8)SW_CLK_MODE_MASK;
 593              		.loc 1 334 0
 594 000a 094B     		ldr	r3, .L37
 595 000c 084A     		ldr	r2, .L37
 596 000e 1278     		ldrb	r2, [r2]
 597 0010 D2B2     		uxtb	r2, r2
 598 0012 D1B2     		uxtb	r1, r2
 599 0014 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 600 0016 22F00702 		bic	r2, r2, #7
 601 001a D2B2     		uxtb	r2, r2
 602 001c 0A43     		orrs	r2, r2, r1
 603 001e D2B2     		uxtb	r2, r2
 604 0020 D2B2     		uxtb	r2, r2
 605 0022 1A70     		strb	r2, [r3]
 335:Generated_Source\PSoC5/SW_CLK.c **** }
 606              		.loc 1 335 0
 607 0024 0C37     		adds	r7, r7, #12
 608              		.cfi_def_cfa_offset 4
 609 0026 BD46     		mov	sp, r7
 610              		.cfi_def_cfa_register 13
 611              		@ sp needed
 612 0028 5DF8047B 		ldr	r7, [sp], #4
 613              		.cfi_restore 7
 614              		.cfi_def_cfa_offset 0
 615 002c 7047     		bx	lr
 616              	.L38:
 617 002e 00BF     		.align	2
 618              	.L37:
 619 0030 9E400040 		.word	1073758366
 620              		.cfi_endproc
 621              	.LFE6:
 622              		.size	SW_CLK_SetModeRegister, .-SW_CLK_SetModeRegister
 623              		.section	.text.SW_CLK_ClearModeRegister,"ax",%progbits
 624              		.align	2
 625              		.global	SW_CLK_ClearModeRegister
 626              		.thumb
 627              		.thumb_func
 628              		.type	SW_CLK_ClearModeRegister, %function
 629              	SW_CLK_ClearModeRegister:
 630              	.LFB7:
 336:Generated_Source\PSoC5/SW_CLK.c **** 
 337:Generated_Source\PSoC5/SW_CLK.c **** 
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 18


 338:Generated_Source\PSoC5/SW_CLK.c **** /*******************************************************************************
 339:Generated_Source\PSoC5/SW_CLK.c **** * Function Name: SW_CLK_ClearModeRegister
 340:Generated_Source\PSoC5/SW_CLK.c **** ********************************************************************************
 341:Generated_Source\PSoC5/SW_CLK.c **** *
 342:Generated_Source\PSoC5/SW_CLK.c **** * Summary:
 343:Generated_Source\PSoC5/SW_CLK.c **** *  Clears flags that control the operating mode of the clock. This function
 344:Generated_Source\PSoC5/SW_CLK.c **** *  only changes flags from 1 to 0; flags that are already 0 will remain
 345:Generated_Source\PSoC5/SW_CLK.c **** *  unchanged. To set flags, use the SetModeRegister function. The clock must be
 346:Generated_Source\PSoC5/SW_CLK.c **** *  disabled before changing the mode.
 347:Generated_Source\PSoC5/SW_CLK.c **** *
 348:Generated_Source\PSoC5/SW_CLK.c **** * Parameters:
 349:Generated_Source\PSoC5/SW_CLK.c **** *  clkMode: Bit mask containing the bits to clear. For PSoC 3 and PSoC 5,
 350:Generated_Source\PSoC5/SW_CLK.c **** *   clkMode should be a set of the following optional bits or'ed together.
 351:Generated_Source\PSoC5/SW_CLK.c **** *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 352:Generated_Source\PSoC5/SW_CLK.c **** *                 occur when the divider count reaches half of the divide
 353:Generated_Source\PSoC5/SW_CLK.c **** *                 value.
 354:Generated_Source\PSoC5/SW_CLK.c **** *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 355:Generated_Source\PSoC5/SW_CLK.c **** *                 is asserted for approximately half of its period. When
 356:Generated_Source\PSoC5/SW_CLK.c **** *                 disabled, the output clock is asserted for one period of the
 357:Generated_Source\PSoC5/SW_CLK.c **** *                 source clock.
 358:Generated_Source\PSoC5/SW_CLK.c **** *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 359:Generated_Source\PSoC5/SW_CLK.c **** *                 be enabled for all synchronous clocks.
 360:Generated_Source\PSoC5/SW_CLK.c **** *   See the Technical Reference Manual for details about setting the mode of
 361:Generated_Source\PSoC5/SW_CLK.c **** *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 362:Generated_Source\PSoC5/SW_CLK.c **** *
 363:Generated_Source\PSoC5/SW_CLK.c **** * Returns:
 364:Generated_Source\PSoC5/SW_CLK.c **** *  None
 365:Generated_Source\PSoC5/SW_CLK.c **** *
 366:Generated_Source\PSoC5/SW_CLK.c **** *******************************************************************************/
 367:Generated_Source\PSoC5/SW_CLK.c **** void SW_CLK_ClearModeRegister(uint8 modeBitMask) 
 368:Generated_Source\PSoC5/SW_CLK.c **** {
 631              		.loc 1 368 0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 8
 634              		@ frame_needed = 1, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 636 0000 80B4     		push	{r7}
 637              		.cfi_def_cfa_offset 4
 638              		.cfi_offset 7, -4
 639 0002 83B0     		sub	sp, sp, #12
 640              		.cfi_def_cfa_offset 16
 641 0004 00AF     		add	r7, sp, #0
 642              		.cfi_def_cfa_register 7
 643 0006 0346     		mov	r3, r0
 644 0008 FB71     		strb	r3, [r7, #7]
 369:Generated_Source\PSoC5/SW_CLK.c ****     SW_CLK_MOD_SRC &= (uint8)(~modeBitMask) | (uint8)(~(uint8)(SW_CLK_MODE_MASK));
 645              		.loc 1 369 0
 646 000a 0949     		ldr	r1, .L40
 647 000c 084B     		ldr	r3, .L40
 648 000e 1B78     		ldrb	r3, [r3]
 649 0010 DAB2     		uxtb	r2, r3
 650 0012 FB79     		ldrb	r3, [r7, #7]
 651 0014 DB43     		mvns	r3, r3
 652 0016 DBB2     		uxtb	r3, r3
 653 0018 43F00703 		orr	r3, r3, #7
 654 001c DBB2     		uxtb	r3, r3
 655 001e 1340     		ands	r3, r3, r2
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 19


 656 0020 DBB2     		uxtb	r3, r3
 657 0022 0B70     		strb	r3, [r1]
 370:Generated_Source\PSoC5/SW_CLK.c **** }
 658              		.loc 1 370 0
 659 0024 0C37     		adds	r7, r7, #12
 660              		.cfi_def_cfa_offset 4
 661 0026 BD46     		mov	sp, r7
 662              		.cfi_def_cfa_register 13
 663              		@ sp needed
 664 0028 5DF8047B 		ldr	r7, [sp], #4
 665              		.cfi_restore 7
 666              		.cfi_def_cfa_offset 0
 667 002c 7047     		bx	lr
 668              	.L41:
 669 002e 00BF     		.align	2
 670              	.L40:
 671 0030 9E400040 		.word	1073758366
 672              		.cfi_endproc
 673              	.LFE7:
 674              		.size	SW_CLK_ClearModeRegister, .-SW_CLK_ClearModeRegister
 675              		.section	.text.SW_CLK_GetModeRegister,"ax",%progbits
 676              		.align	2
 677              		.global	SW_CLK_GetModeRegister
 678              		.thumb
 679              		.thumb_func
 680              		.type	SW_CLK_GetModeRegister, %function
 681              	SW_CLK_GetModeRegister:
 682              	.LFB8:
 371:Generated_Source\PSoC5/SW_CLK.c **** 
 372:Generated_Source\PSoC5/SW_CLK.c **** 
 373:Generated_Source\PSoC5/SW_CLK.c **** /*******************************************************************************
 374:Generated_Source\PSoC5/SW_CLK.c **** * Function Name: SW_CLK_GetModeRegister
 375:Generated_Source\PSoC5/SW_CLK.c **** ********************************************************************************
 376:Generated_Source\PSoC5/SW_CLK.c **** *
 377:Generated_Source\PSoC5/SW_CLK.c **** * Summary:
 378:Generated_Source\PSoC5/SW_CLK.c **** *  Gets the clock mode register value.
 379:Generated_Source\PSoC5/SW_CLK.c **** *
 380:Generated_Source\PSoC5/SW_CLK.c **** * Parameters:
 381:Generated_Source\PSoC5/SW_CLK.c **** *  None
 382:Generated_Source\PSoC5/SW_CLK.c **** *
 383:Generated_Source\PSoC5/SW_CLK.c **** * Returns:
 384:Generated_Source\PSoC5/SW_CLK.c **** *  Bit mask representing the enabled mode bits. See the SetModeRegister and
 385:Generated_Source\PSoC5/SW_CLK.c **** *  ClearModeRegister descriptions for details about the mode bits.
 386:Generated_Source\PSoC5/SW_CLK.c **** *
 387:Generated_Source\PSoC5/SW_CLK.c **** *******************************************************************************/
 388:Generated_Source\PSoC5/SW_CLK.c **** uint8 SW_CLK_GetModeRegister(void) 
 389:Generated_Source\PSoC5/SW_CLK.c **** {
 683              		.loc 1 389 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 1, uses_anonymous_args = 0
 687              		@ link register save eliminated.
 688 0000 80B4     		push	{r7}
 689              		.cfi_def_cfa_offset 4
 690              		.cfi_offset 7, -4
 691 0002 00AF     		add	r7, sp, #0
 692              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 20


 390:Generated_Source\PSoC5/SW_CLK.c ****     return SW_CLK_MOD_SRC & (uint8)(SW_CLK_MODE_MASK);
 693              		.loc 1 390 0
 694 0004 054B     		ldr	r3, .L44
 695 0006 1B78     		ldrb	r3, [r3]
 696 0008 DBB2     		uxtb	r3, r3
 697 000a 23F00703 		bic	r3, r3, #7
 698 000e DBB2     		uxtb	r3, r3
 391:Generated_Source\PSoC5/SW_CLK.c **** }
 699              		.loc 1 391 0
 700 0010 1846     		mov	r0, r3
 701 0012 BD46     		mov	sp, r7
 702              		.cfi_def_cfa_register 13
 703              		@ sp needed
 704 0014 5DF8047B 		ldr	r7, [sp], #4
 705              		.cfi_restore 7
 706              		.cfi_def_cfa_offset 0
 707 0018 7047     		bx	lr
 708              	.L45:
 709 001a 00BF     		.align	2
 710              	.L44:
 711 001c 9E400040 		.word	1073758366
 712              		.cfi_endproc
 713              	.LFE8:
 714              		.size	SW_CLK_GetModeRegister, .-SW_CLK_GetModeRegister
 715              		.section	.text.SW_CLK_SetSourceRegister,"ax",%progbits
 716              		.align	2
 717              		.global	SW_CLK_SetSourceRegister
 718              		.thumb
 719              		.thumb_func
 720              		.type	SW_CLK_SetSourceRegister, %function
 721              	SW_CLK_SetSourceRegister:
 722              	.LFB9:
 392:Generated_Source\PSoC5/SW_CLK.c **** 
 393:Generated_Source\PSoC5/SW_CLK.c **** 
 394:Generated_Source\PSoC5/SW_CLK.c **** /*******************************************************************************
 395:Generated_Source\PSoC5/SW_CLK.c **** * Function Name: SW_CLK_SetSourceRegister
 396:Generated_Source\PSoC5/SW_CLK.c **** ********************************************************************************
 397:Generated_Source\PSoC5/SW_CLK.c **** *
 398:Generated_Source\PSoC5/SW_CLK.c **** * Summary:
 399:Generated_Source\PSoC5/SW_CLK.c **** *  Sets the input source of the clock. The clock must be disabled before
 400:Generated_Source\PSoC5/SW_CLK.c **** *  changing the source. The old and new clock sources must be running.
 401:Generated_Source\PSoC5/SW_CLK.c **** *
 402:Generated_Source\PSoC5/SW_CLK.c **** * Parameters:
 403:Generated_Source\PSoC5/SW_CLK.c **** *  clkSource:  For PSoC 3 and PSoC 5 devices, clkSource should be one of the
 404:Generated_Source\PSoC5/SW_CLK.c **** *   following input sources:
 405:Generated_Source\PSoC5/SW_CLK.c **** *   - CYCLK_SRC_SEL_SYNC_DIG
 406:Generated_Source\PSoC5/SW_CLK.c **** *   - CYCLK_SRC_SEL_IMO
 407:Generated_Source\PSoC5/SW_CLK.c **** *   - CYCLK_SRC_SEL_XTALM
 408:Generated_Source\PSoC5/SW_CLK.c **** *   - CYCLK_SRC_SEL_ILO
 409:Generated_Source\PSoC5/SW_CLK.c **** *   - CYCLK_SRC_SEL_PLL
 410:Generated_Source\PSoC5/SW_CLK.c **** *   - CYCLK_SRC_SEL_XTALK
 411:Generated_Source\PSoC5/SW_CLK.c **** *   - CYCLK_SRC_SEL_DSI_G
 412:Generated_Source\PSoC5/SW_CLK.c **** *   - CYCLK_SRC_SEL_DSI_D/CYCLK_SRC_SEL_DSI_A
 413:Generated_Source\PSoC5/SW_CLK.c **** *   See the Technical Reference Manual for details on clock sources.
 414:Generated_Source\PSoC5/SW_CLK.c **** *
 415:Generated_Source\PSoC5/SW_CLK.c **** * Returns:
 416:Generated_Source\PSoC5/SW_CLK.c **** *  None
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 21


 417:Generated_Source\PSoC5/SW_CLK.c **** *
 418:Generated_Source\PSoC5/SW_CLK.c **** *******************************************************************************/
 419:Generated_Source\PSoC5/SW_CLK.c **** void SW_CLK_SetSourceRegister(uint8 clkSource) 
 420:Generated_Source\PSoC5/SW_CLK.c **** {
 723              		.loc 1 420 0
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 16
 726              		@ frame_needed = 1, uses_anonymous_args = 0
 727 0000 80B5     		push	{r7, lr}
 728              		.cfi_def_cfa_offset 8
 729              		.cfi_offset 7, -8
 730              		.cfi_offset 14, -4
 731 0002 84B0     		sub	sp, sp, #16
 732              		.cfi_def_cfa_offset 24
 733 0004 00AF     		add	r7, sp, #0
 734              		.cfi_def_cfa_register 7
 735 0006 0346     		mov	r3, r0
 736 0008 FB71     		strb	r3, [r7, #7]
 421:Generated_Source\PSoC5/SW_CLK.c ****     uint16 currDiv = SW_CLK_GetDividerRegister();
 737              		.loc 1 421 0
 738 000a FFF7FEFF 		bl	SW_CLK_GetDividerRegister
 739 000e 0346     		mov	r3, r0
 740 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 422:Generated_Source\PSoC5/SW_CLK.c ****     uint8 oldSrc = SW_CLK_GetSourceRegister();
 741              		.loc 1 422 0
 742 0012 FFF7FEFF 		bl	SW_CLK_GetSourceRegister
 743 0016 0346     		mov	r3, r0
 744 0018 7B73     		strb	r3, [r7, #13]
 423:Generated_Source\PSoC5/SW_CLK.c **** 
 424:Generated_Source\PSoC5/SW_CLK.c ****     if (((oldSrc != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 745              		.loc 1 424 0
 746 001a 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 747 001c 002B     		cmp	r3, #0
 748 001e 1BD0     		beq	.L47
 749              		.loc 1 424 0 is_stmt 0 discriminator 1
 750 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 751 0022 002B     		cmp	r3, #0
 752 0024 18D1     		bne	.L47
 425:Generated_Source\PSoC5/SW_CLK.c ****         (clkSource == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 753              		.loc 1 425 0 is_stmt 1
 754 0026 FB89     		ldrh	r3, [r7, #14]
 755 0028 002B     		cmp	r3, #0
 756 002a 15D1     		bne	.L47
 426:Generated_Source\PSoC5/SW_CLK.c ****     {
 427:Generated_Source\PSoC5/SW_CLK.c ****         /* Switching to Master and divider is 1, set SSS, which will output master, */
 428:Generated_Source\PSoC5/SW_CLK.c ****         /* then set the source so we are consistent.                                */
 429:Generated_Source\PSoC5/SW_CLK.c ****         SW_CLK_MOD_SRC |= CYCLK_SSS;
 757              		.loc 1 429 0
 758 002c 224A     		ldr	r2, .L50
 759 002e 224B     		ldr	r3, .L50
 760 0030 1B78     		ldrb	r3, [r3]
 761 0032 DBB2     		uxtb	r3, r3
 762 0034 43F04003 		orr	r3, r3, #64
 763 0038 DBB2     		uxtb	r3, r3
 764 003a 1370     		strb	r3, [r2]
 430:Generated_Source\PSoC5/SW_CLK.c ****         SW_CLK_MOD_SRC =
 765              		.loc 1 430 0
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 22


 766 003c 1E4B     		ldr	r3, .L50
 431:Generated_Source\PSoC5/SW_CLK.c ****             (SW_CLK_MOD_SRC & (uint8)(~SW_CLK_SRC_SEL_MSK)) | clkSource;
 767              		.loc 1 431 0
 768 003e 1E4A     		ldr	r2, .L50
 769 0040 1278     		ldrb	r2, [r2]
 770 0042 D2B2     		uxtb	r2, r2
 430:Generated_Source\PSoC5/SW_CLK.c ****         SW_CLK_MOD_SRC =
 771              		.loc 1 430 0
 772 0044 D2B2     		uxtb	r2, r2
 773 0046 22F00702 		bic	r2, r2, #7
 774 004a D1B2     		uxtb	r1, r2
 775 004c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 776 004e 0A43     		orrs	r2, r2, r1
 777 0050 D2B2     		uxtb	r2, r2
 778 0052 D2B2     		uxtb	r2, r2
 779 0054 1A70     		strb	r2, [r3]
 780 0056 2BE0     		b	.L46
 781              	.L47:
 432:Generated_Source\PSoC5/SW_CLK.c ****     }
 433:Generated_Source\PSoC5/SW_CLK.c ****     else if (((oldSrc == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 782              		.loc 1 433 0
 783 0058 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 784 005a 002B     		cmp	r3, #0
 785 005c 1BD1     		bne	.L49
 786              		.loc 1 433 0 is_stmt 0 discriminator 1
 787 005e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 788 0060 002B     		cmp	r3, #0
 789 0062 18D0     		beq	.L49
 434:Generated_Source\PSoC5/SW_CLK.c ****             (clkSource != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 790              		.loc 1 434 0 is_stmt 1
 791 0064 FB89     		ldrh	r3, [r7, #14]
 792 0066 002B     		cmp	r3, #0
 793 0068 15D1     		bne	.L49
 435:Generated_Source\PSoC5/SW_CLK.c ****     {
 436:Generated_Source\PSoC5/SW_CLK.c ****         /* Switching from Master to not and divider is 1, set source, so we don't   */
 437:Generated_Source\PSoC5/SW_CLK.c ****         /* lock when we clear SSS.                                                  */
 438:Generated_Source\PSoC5/SW_CLK.c ****         SW_CLK_MOD_SRC =
 794              		.loc 1 438 0
 795 006a 134B     		ldr	r3, .L50
 439:Generated_Source\PSoC5/SW_CLK.c ****             (SW_CLK_MOD_SRC & (uint8)(~SW_CLK_SRC_SEL_MSK)) | clkSource;
 796              		.loc 1 439 0
 797 006c 124A     		ldr	r2, .L50
 798 006e 1278     		ldrb	r2, [r2]
 799 0070 D2B2     		uxtb	r2, r2
 438:Generated_Source\PSoC5/SW_CLK.c ****             (SW_CLK_MOD_SRC & (uint8)(~SW_CLK_SRC_SEL_MSK)) | clkSource;
 800              		.loc 1 438 0
 801 0072 D2B2     		uxtb	r2, r2
 802 0074 22F00702 		bic	r2, r2, #7
 803 0078 D1B2     		uxtb	r1, r2
 804 007a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 805 007c 0A43     		orrs	r2, r2, r1
 806 007e D2B2     		uxtb	r2, r2
 807 0080 D2B2     		uxtb	r2, r2
 808 0082 1A70     		strb	r2, [r3]
 440:Generated_Source\PSoC5/SW_CLK.c ****         SW_CLK_MOD_SRC &= (uint8)(~CYCLK_SSS);
 809              		.loc 1 440 0
 810 0084 0C4A     		ldr	r2, .L50
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 23


 811 0086 0C4B     		ldr	r3, .L50
 812 0088 1B78     		ldrb	r3, [r3]
 813 008a DBB2     		uxtb	r3, r3
 814 008c 23F04003 		bic	r3, r3, #64
 815 0090 DBB2     		uxtb	r3, r3
 816 0092 1370     		strb	r3, [r2]
 817 0094 0CE0     		b	.L46
 818              	.L49:
 441:Generated_Source\PSoC5/SW_CLK.c ****     }
 442:Generated_Source\PSoC5/SW_CLK.c ****     else
 443:Generated_Source\PSoC5/SW_CLK.c ****     {
 444:Generated_Source\PSoC5/SW_CLK.c ****         SW_CLK_MOD_SRC =
 819              		.loc 1 444 0
 820 0096 084B     		ldr	r3, .L50
 445:Generated_Source\PSoC5/SW_CLK.c ****             (SW_CLK_MOD_SRC & (uint8)(~SW_CLK_SRC_SEL_MSK)) | clkSource;
 821              		.loc 1 445 0
 822 0098 074A     		ldr	r2, .L50
 823 009a 1278     		ldrb	r2, [r2]
 824 009c D2B2     		uxtb	r2, r2
 444:Generated_Source\PSoC5/SW_CLK.c ****             (SW_CLK_MOD_SRC & (uint8)(~SW_CLK_SRC_SEL_MSK)) | clkSource;
 825              		.loc 1 444 0
 826 009e D2B2     		uxtb	r2, r2
 827 00a0 22F00702 		bic	r2, r2, #7
 828 00a4 D1B2     		uxtb	r1, r2
 829 00a6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 830 00a8 0A43     		orrs	r2, r2, r1
 831 00aa D2B2     		uxtb	r2, r2
 832 00ac D2B2     		uxtb	r2, r2
 833 00ae 1A70     		strb	r2, [r3]
 834              	.L46:
 446:Generated_Source\PSoC5/SW_CLK.c ****     }
 447:Generated_Source\PSoC5/SW_CLK.c **** }
 835              		.loc 1 447 0
 836 00b0 1037     		adds	r7, r7, #16
 837              		.cfi_def_cfa_offset 8
 838 00b2 BD46     		mov	sp, r7
 839              		.cfi_def_cfa_register 13
 840              		@ sp needed
 841 00b4 80BD     		pop	{r7, pc}
 842              	.L51:
 843 00b6 00BF     		.align	2
 844              	.L50:
 845 00b8 9E400040 		.word	1073758366
 846              		.cfi_endproc
 847              	.LFE9:
 848              		.size	SW_CLK_SetSourceRegister, .-SW_CLK_SetSourceRegister
 849              		.section	.text.SW_CLK_GetSourceRegister,"ax",%progbits
 850              		.align	2
 851              		.global	SW_CLK_GetSourceRegister
 852              		.thumb
 853              		.thumb_func
 854              		.type	SW_CLK_GetSourceRegister, %function
 855              	SW_CLK_GetSourceRegister:
 856              	.LFB10:
 448:Generated_Source\PSoC5/SW_CLK.c **** 
 449:Generated_Source\PSoC5/SW_CLK.c **** 
 450:Generated_Source\PSoC5/SW_CLK.c **** /*******************************************************************************
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 24


 451:Generated_Source\PSoC5/SW_CLK.c **** * Function Name: SW_CLK_GetSourceRegister
 452:Generated_Source\PSoC5/SW_CLK.c **** ********************************************************************************
 453:Generated_Source\PSoC5/SW_CLK.c **** *
 454:Generated_Source\PSoC5/SW_CLK.c **** * Summary:
 455:Generated_Source\PSoC5/SW_CLK.c **** *  Gets the input source of the clock.
 456:Generated_Source\PSoC5/SW_CLK.c **** *
 457:Generated_Source\PSoC5/SW_CLK.c **** * Parameters:
 458:Generated_Source\PSoC5/SW_CLK.c **** *  None
 459:Generated_Source\PSoC5/SW_CLK.c **** *
 460:Generated_Source\PSoC5/SW_CLK.c **** * Returns:
 461:Generated_Source\PSoC5/SW_CLK.c **** *  The input source of the clock. See SetSourceRegister for details.
 462:Generated_Source\PSoC5/SW_CLK.c **** *
 463:Generated_Source\PSoC5/SW_CLK.c **** *******************************************************************************/
 464:Generated_Source\PSoC5/SW_CLK.c **** uint8 SW_CLK_GetSourceRegister(void) 
 465:Generated_Source\PSoC5/SW_CLK.c **** {
 857              		.loc 1 465 0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 1, uses_anonymous_args = 0
 861              		@ link register save eliminated.
 862 0000 80B4     		push	{r7}
 863              		.cfi_def_cfa_offset 4
 864              		.cfi_offset 7, -4
 865 0002 00AF     		add	r7, sp, #0
 866              		.cfi_def_cfa_register 7
 466:Generated_Source\PSoC5/SW_CLK.c ****     return SW_CLK_MOD_SRC & SW_CLK_SRC_SEL_MSK;
 867              		.loc 1 466 0
 868 0004 054B     		ldr	r3, .L54
 869 0006 1B78     		ldrb	r3, [r3]
 870 0008 DBB2     		uxtb	r3, r3
 871 000a 03F00703 		and	r3, r3, #7
 872 000e DBB2     		uxtb	r3, r3
 467:Generated_Source\PSoC5/SW_CLK.c **** }
 873              		.loc 1 467 0
 874 0010 1846     		mov	r0, r3
 875 0012 BD46     		mov	sp, r7
 876              		.cfi_def_cfa_register 13
 877              		@ sp needed
 878 0014 5DF8047B 		ldr	r7, [sp], #4
 879              		.cfi_restore 7
 880              		.cfi_def_cfa_offset 0
 881 0018 7047     		bx	lr
 882              	.L55:
 883 001a 00BF     		.align	2
 884              	.L54:
 885 001c 9E400040 		.word	1073758366
 886              		.cfi_endproc
 887              	.LFE10:
 888              		.size	SW_CLK_GetSourceRegister, .-SW_CLK_GetSourceRegister
 889              		.text
 890              	.Letext0:
 891              		.file 2 "Generated_Source\\PSoC5/cytypes.h"
 892              		.section	.debug_info,"",%progbits
 893              	.Ldebug_info0:
 894 0000 57020000 		.4byte	0x257
 895 0004 0400     		.2byte	0x4
 896 0006 00000000 		.4byte	.Ldebug_abbrev0
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 25


 897 000a 04       		.byte	0x4
 898 000b 01       		.uleb128 0x1
 899 000c AC000000 		.4byte	.LASF37
 900 0010 01       		.byte	0x1
 901 0011 3A010000 		.4byte	.LASF38
 902 0015 89020000 		.4byte	.LASF39
 903 0019 00000000 		.4byte	.Ldebug_ranges0+0
 904 001d 00000000 		.4byte	0
 905 0021 00000000 		.4byte	.Ldebug_line0
 906 0025 02       		.uleb128 0x2
 907 0026 01       		.byte	0x1
 908 0027 06       		.byte	0x6
 909 0028 A7010000 		.4byte	.LASF0
 910 002c 02       		.uleb128 0x2
 911 002d 01       		.byte	0x1
 912 002e 08       		.byte	0x8
 913 002f 73010000 		.4byte	.LASF1
 914 0033 02       		.uleb128 0x2
 915 0034 02       		.byte	0x2
 916 0035 05       		.byte	0x5
 917 0036 0E000000 		.4byte	.LASF2
 918 003a 02       		.uleb128 0x2
 919 003b 02       		.byte	0x2
 920 003c 07       		.byte	0x7
 921 003d EE010000 		.4byte	.LASF3
 922 0041 02       		.uleb128 0x2
 923 0042 04       		.byte	0x4
 924 0043 05       		.byte	0x5
 925 0044 06020000 		.4byte	.LASF4
 926 0048 02       		.uleb128 0x2
 927 0049 04       		.byte	0x4
 928 004a 07       		.byte	0x7
 929 004b 3D020000 		.4byte	.LASF5
 930 004f 02       		.uleb128 0x2
 931 0050 08       		.byte	0x8
 932 0051 05       		.byte	0x5
 933 0052 85000000 		.4byte	.LASF6
 934 0056 02       		.uleb128 0x2
 935 0057 08       		.byte	0x8
 936 0058 07       		.byte	0x7
 937 0059 B3010000 		.4byte	.LASF7
 938 005d 03       		.uleb128 0x3
 939 005e 04       		.byte	0x4
 940 005f 05       		.byte	0x5
 941 0060 696E7400 		.ascii	"int\000"
 942 0064 02       		.uleb128 0x2
 943 0065 04       		.byte	0x4
 944 0066 07       		.byte	0x7
 945 0067 CA010000 		.4byte	.LASF8
 946 006b 04       		.uleb128 0x4
 947 006c 48000000 		.4byte	.LASF9
 948 0070 02       		.byte	0x2
 949 0071 C2       		.byte	0xc2
 950 0072 2C000000 		.4byte	0x2c
 951 0076 04       		.uleb128 0x4
 952 0077 32000000 		.4byte	.LASF10
 953 007b 02       		.byte	0x2
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 26


 954 007c C3       		.byte	0xc3
 955 007d 3A000000 		.4byte	0x3a
 956 0081 02       		.uleb128 0x2
 957 0082 04       		.byte	0x4
 958 0083 04       		.byte	0x4
 959 0084 66000000 		.4byte	.LASF11
 960 0088 02       		.uleb128 0x2
 961 0089 08       		.byte	0x8
 962 008a 04       		.byte	0x4
 963 008b 4F020000 		.4byte	.LASF12
 964 008f 02       		.uleb128 0x2
 965 0090 01       		.byte	0x1
 966 0091 08       		.byte	0x8
 967 0092 01020000 		.4byte	.LASF13
 968 0096 05       		.uleb128 0x5
 969 0097 38020000 		.4byte	.LASF14
 970 009b 02       		.byte	0x2
 971 009c 6C01     		.2byte	0x16c
 972 009e A2000000 		.4byte	0xa2
 973 00a2 06       		.uleb128 0x6
 974 00a3 6B000000 		.4byte	0x6b
 975 00a7 05       		.uleb128 0x5
 976 00a8 08000000 		.4byte	.LASF15
 977 00ac 02       		.byte	0x2
 978 00ad 6D01     		.2byte	0x16d
 979 00af B3000000 		.4byte	0xb3
 980 00b3 06       		.uleb128 0x6
 981 00b4 76000000 		.4byte	0x76
 982 00b8 07       		.uleb128 0x7
 983 00b9 59000000 		.4byte	.LASF16
 984 00bd 01       		.byte	0x1
 985 00be 2D       		.byte	0x2d
 986 00bf 00000000 		.4byte	.LFB0
 987 00c3 34000000 		.4byte	.LFE0-.LFB0
 988 00c7 01       		.uleb128 0x1
 989 00c8 9C       		.byte	0x9c
 990 00c9 07       		.uleb128 0x7
 991 00ca 2C020000 		.4byte	.LASF17
 992 00ce 01       		.byte	0x1
 993 00cf 47       		.byte	0x47
 994 00d0 00000000 		.4byte	.LFB1
 995 00d4 34000000 		.4byte	.LFE1-.LFB1
 996 00d8 01       		.uleb128 0x1
 997 00d9 9C       		.byte	0x9c
 998 00da 08       		.uleb128 0x8
 999 00db 56020000 		.4byte	.LASF18
 1000 00df 01       		.byte	0x1
 1001 00e0 64       		.byte	0x64
 1002 00e1 00000000 		.4byte	.LFB2
 1003 00e5 B0000000 		.4byte	.LFE2-.LFB2
 1004 00e9 01       		.uleb128 0x1
 1005 00ea 9C       		.byte	0x9c
 1006 00eb 08010000 		.4byte	0x108
 1007 00ef 09       		.uleb128 0x9
 1008 00f0 14000000 		.4byte	.LBB2
 1009 00f4 70000000 		.4byte	.LBE2-.LBB2
 1010 00f8 0A       		.uleb128 0xa
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 27


 1011 00f9 21020000 		.4byte	.LASF24
 1012 00fd 01       		.byte	0x1
 1013 00fe 69       		.byte	0x69
 1014 00ff 76000000 		.4byte	0x76
 1015 0103 02       		.uleb128 0x2
 1016 0104 91       		.byte	0x91
 1017 0105 76       		.sleb128 -10
 1018 0106 00       		.byte	0
 1019 0107 00       		.byte	0
 1020 0108 08       		.uleb128 0x8
 1021 0109 75020000 		.4byte	.LASF19
 1022 010d 01       		.byte	0x1
 1023 010e 9D       		.byte	0x9d
 1024 010f 00000000 		.4byte	.LFB3
 1025 0113 40000000 		.4byte	.LFE3-.LFB3
 1026 0117 01       		.uleb128 0x1
 1027 0118 9C       		.byte	0x9c
 1028 0119 2C010000 		.4byte	0x12c
 1029 011d 0B       		.uleb128 0xb
 1030 011e 67020000 		.4byte	.LASF21
 1031 0122 01       		.byte	0x1
 1032 0123 9D       		.byte	0x9d
 1033 0124 6B000000 		.4byte	0x6b
 1034 0128 02       		.uleb128 0x2
 1035 0129 91       		.byte	0x91
 1036 012a 77       		.sleb128 -9
 1037 012b 00       		.byte	0
 1038 012c 0C       		.uleb128 0xc
 1039 012d 8D010000 		.4byte	.LASF20
 1040 0131 01       		.byte	0x1
 1041 0132 C1       		.byte	0xc1
 1042 0133 00000000 		.4byte	.LFB4
 1043 0137 60010000 		.4byte	.LFE4-.LFB4
 1044 013b 01       		.uleb128 0x1
 1045 013c 9C       		.byte	0x9c
 1046 013d 88010000 		.4byte	0x188
 1047 0141 0B       		.uleb128 0xb
 1048 0142 4E000000 		.4byte	.LASF22
 1049 0146 01       		.byte	0x1
 1050 0147 C1       		.byte	0xc1
 1051 0148 76000000 		.4byte	0x76
 1052 014c 02       		.uleb128 0x2
 1053 014d 91       		.byte	0x91
 1054 014e 6E       		.sleb128 -18
 1055 014f 0B       		.uleb128 0xb
 1056 0150 39000000 		.4byte	.LASF23
 1057 0154 01       		.byte	0x1
 1058 0155 C1       		.byte	0xc1
 1059 0156 6B000000 		.4byte	0x6b
 1060 015a 02       		.uleb128 0x2
 1061 015b 91       		.byte	0x91
 1062 015c 6D       		.sleb128 -19
 1063 015d 0A       		.uleb128 0xa
 1064 015e 6D020000 		.4byte	.LASF25
 1065 0162 01       		.byte	0x1
 1066 0163 C4       		.byte	0xc4
 1067 0164 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 28


 1068 0168 02       		.uleb128 0x2
 1069 0169 91       		.byte	0x91
 1070 016a 73       		.sleb128 -13
 1071 016b 0A       		.uleb128 0xa
 1072 016c 19020000 		.4byte	.LASF26
 1073 0170 01       		.byte	0x1
 1074 0171 C6       		.byte	0xc6
 1075 0172 6B000000 		.4byte	0x6b
 1076 0176 02       		.uleb128 0x2
 1077 0177 91       		.byte	0x91
 1078 0178 77       		.sleb128 -9
 1079 0179 0A       		.uleb128 0xa
 1080 017a 21020000 		.4byte	.LASF24
 1081 017e 01       		.byte	0x1
 1082 017f C7       		.byte	0xc7
 1083 0180 76000000 		.4byte	0x76
 1084 0184 02       		.uleb128 0x2
 1085 0185 91       		.byte	0x91
 1086 0186 74       		.sleb128 -12
 1087 0187 00       		.byte	0
 1088 0188 0D       		.uleb128 0xd
 1089 0189 18000000 		.4byte	.LASF30
 1090 018d 01       		.byte	0x1
 1091 018e 2901     		.2byte	0x129
 1092 0190 76000000 		.4byte	0x76
 1093 0194 00000000 		.4byte	.LFB5
 1094 0198 18000000 		.4byte	.LFE5-.LFB5
 1095 019c 01       		.uleb128 0x1
 1096 019d 9C       		.byte	0x9c
 1097 019e 0E       		.uleb128 0xe
 1098 019f D7010000 		.4byte	.LASF27
 1099 01a3 01       		.byte	0x1
 1100 01a4 4C01     		.2byte	0x14c
 1101 01a6 00000000 		.4byte	.LFB6
 1102 01aa 34000000 		.4byte	.LFE6-.LFB6
 1103 01ae 01       		.uleb128 0x1
 1104 01af 9C       		.byte	0x9c
 1105 01b0 C4010000 		.4byte	0x1c4
 1106 01b4 0F       		.uleb128 0xf
 1107 01b5 81010000 		.4byte	.LASF28
 1108 01b9 01       		.byte	0x1
 1109 01ba 4C01     		.2byte	0x14c
 1110 01bc 6B000000 		.4byte	0x6b
 1111 01c0 02       		.uleb128 0x2
 1112 01c1 91       		.byte	0x91
 1113 01c2 77       		.sleb128 -9
 1114 01c3 00       		.byte	0
 1115 01c4 0E       		.uleb128 0xe
 1116 01c5 5A010000 		.4byte	.LASF29
 1117 01c9 01       		.byte	0x1
 1118 01ca 6F01     		.2byte	0x16f
 1119 01cc 00000000 		.4byte	.LFB7
 1120 01d0 34000000 		.4byte	.LFE7-.LFB7
 1121 01d4 01       		.uleb128 0x1
 1122 01d5 9C       		.byte	0x9c
 1123 01d6 EA010000 		.4byte	0x1ea
 1124 01da 0F       		.uleb128 0xf
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 29


 1125 01db 81010000 		.4byte	.LASF28
 1126 01df 01       		.byte	0x1
 1127 01e0 6F01     		.2byte	0x16f
 1128 01e2 6B000000 		.4byte	0x6b
 1129 01e6 02       		.uleb128 0x2
 1130 01e7 91       		.byte	0x91
 1131 01e8 77       		.sleb128 -9
 1132 01e9 00       		.byte	0
 1133 01ea 0D       		.uleb128 0xd
 1134 01eb C4020000 		.4byte	.LASF31
 1135 01ef 01       		.byte	0x1
 1136 01f0 8401     		.2byte	0x184
 1137 01f2 6B000000 		.4byte	0x6b
 1138 01f6 00000000 		.4byte	.LFB8
 1139 01fa 20000000 		.4byte	.LFE8-.LFB8
 1140 01fe 01       		.uleb128 0x1
 1141 01ff 9C       		.byte	0x9c
 1142 0200 10       		.uleb128 0x10
 1143 0201 93000000 		.4byte	.LASF32
 1144 0205 01       		.byte	0x1
 1145 0206 A301     		.2byte	0x1a3
 1146 0208 00000000 		.4byte	.LFB9
 1147 020c BC000000 		.4byte	.LFE9-.LFB9
 1148 0210 01       		.uleb128 0x1
 1149 0211 9C       		.byte	0x9c
 1150 0212 44020000 		.4byte	0x244
 1151 0216 0F       		.uleb128 0xf
 1152 0217 0F020000 		.4byte	.LASF33
 1153 021b 01       		.byte	0x1
 1154 021c A301     		.2byte	0x1a3
 1155 021e 6B000000 		.4byte	0x6b
 1156 0222 02       		.uleb128 0x2
 1157 0223 91       		.byte	0x91
 1158 0224 6F       		.sleb128 -17
 1159 0225 11       		.uleb128 0x11
 1160 0226 00000000 		.4byte	.LASF34
 1161 022a 01       		.byte	0x1
 1162 022b A501     		.2byte	0x1a5
 1163 022d 76000000 		.4byte	0x76
 1164 0231 02       		.uleb128 0x2
 1165 0232 91       		.byte	0x91
 1166 0233 76       		.sleb128 -10
 1167 0234 11       		.uleb128 0x11
 1168 0235 41000000 		.4byte	.LASF35
 1169 0239 01       		.byte	0x1
 1170 023a A601     		.2byte	0x1a6
 1171 023c 6B000000 		.4byte	0x6b
 1172 0240 02       		.uleb128 0x2
 1173 0241 91       		.byte	0x91
 1174 0242 75       		.sleb128 -11
 1175 0243 00       		.byte	0
 1176 0244 0D       		.uleb128 0xd
 1177 0245 6C000000 		.4byte	.LASF36
 1178 0249 01       		.byte	0x1
 1179 024a D001     		.2byte	0x1d0
 1180 024c 6B000000 		.4byte	0x6b
 1181 0250 00000000 		.4byte	.LFB10
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 30


 1182 0254 20000000 		.4byte	.LFE10-.LFB10
 1183 0258 01       		.uleb128 0x1
 1184 0259 9C       		.byte	0x9c
 1185 025a 00       		.byte	0
 1186              		.section	.debug_abbrev,"",%progbits
 1187              	.Ldebug_abbrev0:
 1188 0000 01       		.uleb128 0x1
 1189 0001 11       		.uleb128 0x11
 1190 0002 01       		.byte	0x1
 1191 0003 25       		.uleb128 0x25
 1192 0004 0E       		.uleb128 0xe
 1193 0005 13       		.uleb128 0x13
 1194 0006 0B       		.uleb128 0xb
 1195 0007 03       		.uleb128 0x3
 1196 0008 0E       		.uleb128 0xe
 1197 0009 1B       		.uleb128 0x1b
 1198 000a 0E       		.uleb128 0xe
 1199 000b 55       		.uleb128 0x55
 1200 000c 17       		.uleb128 0x17
 1201 000d 11       		.uleb128 0x11
 1202 000e 01       		.uleb128 0x1
 1203 000f 10       		.uleb128 0x10
 1204 0010 17       		.uleb128 0x17
 1205 0011 00       		.byte	0
 1206 0012 00       		.byte	0
 1207 0013 02       		.uleb128 0x2
 1208 0014 24       		.uleb128 0x24
 1209 0015 00       		.byte	0
 1210 0016 0B       		.uleb128 0xb
 1211 0017 0B       		.uleb128 0xb
 1212 0018 3E       		.uleb128 0x3e
 1213 0019 0B       		.uleb128 0xb
 1214 001a 03       		.uleb128 0x3
 1215 001b 0E       		.uleb128 0xe
 1216 001c 00       		.byte	0
 1217 001d 00       		.byte	0
 1218 001e 03       		.uleb128 0x3
 1219 001f 24       		.uleb128 0x24
 1220 0020 00       		.byte	0
 1221 0021 0B       		.uleb128 0xb
 1222 0022 0B       		.uleb128 0xb
 1223 0023 3E       		.uleb128 0x3e
 1224 0024 0B       		.uleb128 0xb
 1225 0025 03       		.uleb128 0x3
 1226 0026 08       		.uleb128 0x8
 1227 0027 00       		.byte	0
 1228 0028 00       		.byte	0
 1229 0029 04       		.uleb128 0x4
 1230 002a 16       		.uleb128 0x16
 1231 002b 00       		.byte	0
 1232 002c 03       		.uleb128 0x3
 1233 002d 0E       		.uleb128 0xe
 1234 002e 3A       		.uleb128 0x3a
 1235 002f 0B       		.uleb128 0xb
 1236 0030 3B       		.uleb128 0x3b
 1237 0031 0B       		.uleb128 0xb
 1238 0032 49       		.uleb128 0x49
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 31


 1239 0033 13       		.uleb128 0x13
 1240 0034 00       		.byte	0
 1241 0035 00       		.byte	0
 1242 0036 05       		.uleb128 0x5
 1243 0037 16       		.uleb128 0x16
 1244 0038 00       		.byte	0
 1245 0039 03       		.uleb128 0x3
 1246 003a 0E       		.uleb128 0xe
 1247 003b 3A       		.uleb128 0x3a
 1248 003c 0B       		.uleb128 0xb
 1249 003d 3B       		.uleb128 0x3b
 1250 003e 05       		.uleb128 0x5
 1251 003f 49       		.uleb128 0x49
 1252 0040 13       		.uleb128 0x13
 1253 0041 00       		.byte	0
 1254 0042 00       		.byte	0
 1255 0043 06       		.uleb128 0x6
 1256 0044 35       		.uleb128 0x35
 1257 0045 00       		.byte	0
 1258 0046 49       		.uleb128 0x49
 1259 0047 13       		.uleb128 0x13
 1260 0048 00       		.byte	0
 1261 0049 00       		.byte	0
 1262 004a 07       		.uleb128 0x7
 1263 004b 2E       		.uleb128 0x2e
 1264 004c 00       		.byte	0
 1265 004d 3F       		.uleb128 0x3f
 1266 004e 19       		.uleb128 0x19
 1267 004f 03       		.uleb128 0x3
 1268 0050 0E       		.uleb128 0xe
 1269 0051 3A       		.uleb128 0x3a
 1270 0052 0B       		.uleb128 0xb
 1271 0053 3B       		.uleb128 0x3b
 1272 0054 0B       		.uleb128 0xb
 1273 0055 27       		.uleb128 0x27
 1274 0056 19       		.uleb128 0x19
 1275 0057 11       		.uleb128 0x11
 1276 0058 01       		.uleb128 0x1
 1277 0059 12       		.uleb128 0x12
 1278 005a 06       		.uleb128 0x6
 1279 005b 40       		.uleb128 0x40
 1280 005c 18       		.uleb128 0x18
 1281 005d 9742     		.uleb128 0x2117
 1282 005f 19       		.uleb128 0x19
 1283 0060 00       		.byte	0
 1284 0061 00       		.byte	0
 1285 0062 08       		.uleb128 0x8
 1286 0063 2E       		.uleb128 0x2e
 1287 0064 01       		.byte	0x1
 1288 0065 3F       		.uleb128 0x3f
 1289 0066 19       		.uleb128 0x19
 1290 0067 03       		.uleb128 0x3
 1291 0068 0E       		.uleb128 0xe
 1292 0069 3A       		.uleb128 0x3a
 1293 006a 0B       		.uleb128 0xb
 1294 006b 3B       		.uleb128 0x3b
 1295 006c 0B       		.uleb128 0xb
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 32


 1296 006d 27       		.uleb128 0x27
 1297 006e 19       		.uleb128 0x19
 1298 006f 11       		.uleb128 0x11
 1299 0070 01       		.uleb128 0x1
 1300 0071 12       		.uleb128 0x12
 1301 0072 06       		.uleb128 0x6
 1302 0073 40       		.uleb128 0x40
 1303 0074 18       		.uleb128 0x18
 1304 0075 9742     		.uleb128 0x2117
 1305 0077 19       		.uleb128 0x19
 1306 0078 01       		.uleb128 0x1
 1307 0079 13       		.uleb128 0x13
 1308 007a 00       		.byte	0
 1309 007b 00       		.byte	0
 1310 007c 09       		.uleb128 0x9
 1311 007d 0B       		.uleb128 0xb
 1312 007e 01       		.byte	0x1
 1313 007f 11       		.uleb128 0x11
 1314 0080 01       		.uleb128 0x1
 1315 0081 12       		.uleb128 0x12
 1316 0082 06       		.uleb128 0x6
 1317 0083 00       		.byte	0
 1318 0084 00       		.byte	0
 1319 0085 0A       		.uleb128 0xa
 1320 0086 34       		.uleb128 0x34
 1321 0087 00       		.byte	0
 1322 0088 03       		.uleb128 0x3
 1323 0089 0E       		.uleb128 0xe
 1324 008a 3A       		.uleb128 0x3a
 1325 008b 0B       		.uleb128 0xb
 1326 008c 3B       		.uleb128 0x3b
 1327 008d 0B       		.uleb128 0xb
 1328 008e 49       		.uleb128 0x49
 1329 008f 13       		.uleb128 0x13
 1330 0090 02       		.uleb128 0x2
 1331 0091 18       		.uleb128 0x18
 1332 0092 00       		.byte	0
 1333 0093 00       		.byte	0
 1334 0094 0B       		.uleb128 0xb
 1335 0095 05       		.uleb128 0x5
 1336 0096 00       		.byte	0
 1337 0097 03       		.uleb128 0x3
 1338 0098 0E       		.uleb128 0xe
 1339 0099 3A       		.uleb128 0x3a
 1340 009a 0B       		.uleb128 0xb
 1341 009b 3B       		.uleb128 0x3b
 1342 009c 0B       		.uleb128 0xb
 1343 009d 49       		.uleb128 0x49
 1344 009e 13       		.uleb128 0x13
 1345 009f 02       		.uleb128 0x2
 1346 00a0 18       		.uleb128 0x18
 1347 00a1 00       		.byte	0
 1348 00a2 00       		.byte	0
 1349 00a3 0C       		.uleb128 0xc
 1350 00a4 2E       		.uleb128 0x2e
 1351 00a5 01       		.byte	0x1
 1352 00a6 3F       		.uleb128 0x3f
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 33


 1353 00a7 19       		.uleb128 0x19
 1354 00a8 03       		.uleb128 0x3
 1355 00a9 0E       		.uleb128 0xe
 1356 00aa 3A       		.uleb128 0x3a
 1357 00ab 0B       		.uleb128 0xb
 1358 00ac 3B       		.uleb128 0x3b
 1359 00ad 0B       		.uleb128 0xb
 1360 00ae 27       		.uleb128 0x27
 1361 00af 19       		.uleb128 0x19
 1362 00b0 11       		.uleb128 0x11
 1363 00b1 01       		.uleb128 0x1
 1364 00b2 12       		.uleb128 0x12
 1365 00b3 06       		.uleb128 0x6
 1366 00b4 40       		.uleb128 0x40
 1367 00b5 18       		.uleb128 0x18
 1368 00b6 9642     		.uleb128 0x2116
 1369 00b8 19       		.uleb128 0x19
 1370 00b9 01       		.uleb128 0x1
 1371 00ba 13       		.uleb128 0x13
 1372 00bb 00       		.byte	0
 1373 00bc 00       		.byte	0
 1374 00bd 0D       		.uleb128 0xd
 1375 00be 2E       		.uleb128 0x2e
 1376 00bf 00       		.byte	0
 1377 00c0 3F       		.uleb128 0x3f
 1378 00c1 19       		.uleb128 0x19
 1379 00c2 03       		.uleb128 0x3
 1380 00c3 0E       		.uleb128 0xe
 1381 00c4 3A       		.uleb128 0x3a
 1382 00c5 0B       		.uleb128 0xb
 1383 00c6 3B       		.uleb128 0x3b
 1384 00c7 05       		.uleb128 0x5
 1385 00c8 27       		.uleb128 0x27
 1386 00c9 19       		.uleb128 0x19
 1387 00ca 49       		.uleb128 0x49
 1388 00cb 13       		.uleb128 0x13
 1389 00cc 11       		.uleb128 0x11
 1390 00cd 01       		.uleb128 0x1
 1391 00ce 12       		.uleb128 0x12
 1392 00cf 06       		.uleb128 0x6
 1393 00d0 40       		.uleb128 0x40
 1394 00d1 18       		.uleb128 0x18
 1395 00d2 9742     		.uleb128 0x2117
 1396 00d4 19       		.uleb128 0x19
 1397 00d5 00       		.byte	0
 1398 00d6 00       		.byte	0
 1399 00d7 0E       		.uleb128 0xe
 1400 00d8 2E       		.uleb128 0x2e
 1401 00d9 01       		.byte	0x1
 1402 00da 3F       		.uleb128 0x3f
 1403 00db 19       		.uleb128 0x19
 1404 00dc 03       		.uleb128 0x3
 1405 00dd 0E       		.uleb128 0xe
 1406 00de 3A       		.uleb128 0x3a
 1407 00df 0B       		.uleb128 0xb
 1408 00e0 3B       		.uleb128 0x3b
 1409 00e1 05       		.uleb128 0x5
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 34


 1410 00e2 27       		.uleb128 0x27
 1411 00e3 19       		.uleb128 0x19
 1412 00e4 11       		.uleb128 0x11
 1413 00e5 01       		.uleb128 0x1
 1414 00e6 12       		.uleb128 0x12
 1415 00e7 06       		.uleb128 0x6
 1416 00e8 40       		.uleb128 0x40
 1417 00e9 18       		.uleb128 0x18
 1418 00ea 9742     		.uleb128 0x2117
 1419 00ec 19       		.uleb128 0x19
 1420 00ed 01       		.uleb128 0x1
 1421 00ee 13       		.uleb128 0x13
 1422 00ef 00       		.byte	0
 1423 00f0 00       		.byte	0
 1424 00f1 0F       		.uleb128 0xf
 1425 00f2 05       		.uleb128 0x5
 1426 00f3 00       		.byte	0
 1427 00f4 03       		.uleb128 0x3
 1428 00f5 0E       		.uleb128 0xe
 1429 00f6 3A       		.uleb128 0x3a
 1430 00f7 0B       		.uleb128 0xb
 1431 00f8 3B       		.uleb128 0x3b
 1432 00f9 05       		.uleb128 0x5
 1433 00fa 49       		.uleb128 0x49
 1434 00fb 13       		.uleb128 0x13
 1435 00fc 02       		.uleb128 0x2
 1436 00fd 18       		.uleb128 0x18
 1437 00fe 00       		.byte	0
 1438 00ff 00       		.byte	0
 1439 0100 10       		.uleb128 0x10
 1440 0101 2E       		.uleb128 0x2e
 1441 0102 01       		.byte	0x1
 1442 0103 3F       		.uleb128 0x3f
 1443 0104 19       		.uleb128 0x19
 1444 0105 03       		.uleb128 0x3
 1445 0106 0E       		.uleb128 0xe
 1446 0107 3A       		.uleb128 0x3a
 1447 0108 0B       		.uleb128 0xb
 1448 0109 3B       		.uleb128 0x3b
 1449 010a 05       		.uleb128 0x5
 1450 010b 27       		.uleb128 0x27
 1451 010c 19       		.uleb128 0x19
 1452 010d 11       		.uleb128 0x11
 1453 010e 01       		.uleb128 0x1
 1454 010f 12       		.uleb128 0x12
 1455 0110 06       		.uleb128 0x6
 1456 0111 40       		.uleb128 0x40
 1457 0112 18       		.uleb128 0x18
 1458 0113 9642     		.uleb128 0x2116
 1459 0115 19       		.uleb128 0x19
 1460 0116 01       		.uleb128 0x1
 1461 0117 13       		.uleb128 0x13
 1462 0118 00       		.byte	0
 1463 0119 00       		.byte	0
 1464 011a 11       		.uleb128 0x11
 1465 011b 34       		.uleb128 0x34
 1466 011c 00       		.byte	0
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 35


 1467 011d 03       		.uleb128 0x3
 1468 011e 0E       		.uleb128 0xe
 1469 011f 3A       		.uleb128 0x3a
 1470 0120 0B       		.uleb128 0xb
 1471 0121 3B       		.uleb128 0x3b
 1472 0122 05       		.uleb128 0x5
 1473 0123 49       		.uleb128 0x49
 1474 0124 13       		.uleb128 0x13
 1475 0125 02       		.uleb128 0x2
 1476 0126 18       		.uleb128 0x18
 1477 0127 00       		.byte	0
 1478 0128 00       		.byte	0
 1479 0129 00       		.byte	0
 1480              		.section	.debug_aranges,"",%progbits
 1481 0000 6C000000 		.4byte	0x6c
 1482 0004 0200     		.2byte	0x2
 1483 0006 00000000 		.4byte	.Ldebug_info0
 1484 000a 04       		.byte	0x4
 1485 000b 00       		.byte	0
 1486 000c 0000     		.2byte	0
 1487 000e 0000     		.2byte	0
 1488 0010 00000000 		.4byte	.LFB0
 1489 0014 34000000 		.4byte	.LFE0-.LFB0
 1490 0018 00000000 		.4byte	.LFB1
 1491 001c 34000000 		.4byte	.LFE1-.LFB1
 1492 0020 00000000 		.4byte	.LFB2
 1493 0024 B0000000 		.4byte	.LFE2-.LFB2
 1494 0028 00000000 		.4byte	.LFB3
 1495 002c 40000000 		.4byte	.LFE3-.LFB3
 1496 0030 00000000 		.4byte	.LFB4
 1497 0034 60010000 		.4byte	.LFE4-.LFB4
 1498 0038 00000000 		.4byte	.LFB5
 1499 003c 18000000 		.4byte	.LFE5-.LFB5
 1500 0040 00000000 		.4byte	.LFB6
 1501 0044 34000000 		.4byte	.LFE6-.LFB6
 1502 0048 00000000 		.4byte	.LFB7
 1503 004c 34000000 		.4byte	.LFE7-.LFB7
 1504 0050 00000000 		.4byte	.LFB8
 1505 0054 20000000 		.4byte	.LFE8-.LFB8
 1506 0058 00000000 		.4byte	.LFB9
 1507 005c BC000000 		.4byte	.LFE9-.LFB9
 1508 0060 00000000 		.4byte	.LFB10
 1509 0064 20000000 		.4byte	.LFE10-.LFB10
 1510 0068 00000000 		.4byte	0
 1511 006c 00000000 		.4byte	0
 1512              		.section	.debug_ranges,"",%progbits
 1513              	.Ldebug_ranges0:
 1514 0000 00000000 		.4byte	.LFB0
 1515 0004 34000000 		.4byte	.LFE0
 1516 0008 00000000 		.4byte	.LFB1
 1517 000c 34000000 		.4byte	.LFE1
 1518 0010 00000000 		.4byte	.LFB2
 1519 0014 B0000000 		.4byte	.LFE2
 1520 0018 00000000 		.4byte	.LFB3
 1521 001c 40000000 		.4byte	.LFE3
 1522 0020 00000000 		.4byte	.LFB4
 1523 0024 60010000 		.4byte	.LFE4
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 36


 1524 0028 00000000 		.4byte	.LFB5
 1525 002c 18000000 		.4byte	.LFE5
 1526 0030 00000000 		.4byte	.LFB6
 1527 0034 34000000 		.4byte	.LFE6
 1528 0038 00000000 		.4byte	.LFB7
 1529 003c 34000000 		.4byte	.LFE7
 1530 0040 00000000 		.4byte	.LFB8
 1531 0044 20000000 		.4byte	.LFE8
 1532 0048 00000000 		.4byte	.LFB9
 1533 004c BC000000 		.4byte	.LFE9
 1534 0050 00000000 		.4byte	.LFB10
 1535 0054 20000000 		.4byte	.LFE10
 1536 0058 00000000 		.4byte	0
 1537 005c 00000000 		.4byte	0
 1538              		.section	.debug_line,"",%progbits
 1539              	.Ldebug_line0:
 1540 0000 9D010000 		.section	.debug_str,"MS",%progbits,1
 1540      02004300 
 1540      00000201 
 1540      FB0E0D00 
 1540      01010101 
 1541              	.LASF34:
 1542 0000 63757272 		.ascii	"currDiv\000"
 1542      44697600 
 1543              	.LASF15:
 1544 0008 72656731 		.ascii	"reg16\000"
 1544      3600
 1545              	.LASF2:
 1546 000e 73686F72 		.ascii	"short int\000"
 1546      7420696E 
 1546      7400
 1547              	.LASF30:
 1548 0018 53575F43 		.ascii	"SW_CLK_GetDividerRegister\000"
 1548      4C4B5F47 
 1548      65744469 
 1548      76696465 
 1548      72526567 
 1549              	.LASF10:
 1550 0032 75696E74 		.ascii	"uint16\000"
 1550      313600
 1551              	.LASF23:
 1552 0039 72657374 		.ascii	"restart\000"
 1552      61727400 
 1553              	.LASF35:
 1554 0041 6F6C6453 		.ascii	"oldSrc\000"
 1554      726300
 1555              	.LASF9:
 1556 0048 75696E74 		.ascii	"uint8\000"
 1556      3800
 1557              	.LASF22:
 1558 004e 636C6B44 		.ascii	"clkDivider\000"
 1558      69766964 
 1558      657200
 1559              	.LASF16:
 1560 0059 53575F43 		.ascii	"SW_CLK_Start\000"
 1560      4C4B5F53 
 1560      74617274 
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 37


 1560      00
 1561              	.LASF11:
 1562 0066 666C6F61 		.ascii	"float\000"
 1562      7400
 1563              	.LASF36:
 1564 006c 53575F43 		.ascii	"SW_CLK_GetSourceRegister\000"
 1564      4C4B5F47 
 1564      6574536F 
 1564      75726365 
 1564      52656769 
 1565              	.LASF6:
 1566 0085 6C6F6E67 		.ascii	"long long int\000"
 1566      206C6F6E 
 1566      6720696E 
 1566      7400
 1567              	.LASF32:
 1568 0093 53575F43 		.ascii	"SW_CLK_SetSourceRegister\000"
 1568      4C4B5F53 
 1568      6574536F 
 1568      75726365 
 1568      52656769 
 1569              	.LASF37:
 1570 00ac 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1570      4320342E 
 1570      392E3320 
 1570      32303135 
 1570      30333033 
 1571 00df 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1571      20726576 
 1571      6973696F 
 1571      6E203232 
 1571      31323230 
 1572 0112 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1572      66756E63 
 1572      74696F6E 
 1572      2D736563 
 1572      74696F6E 
 1573              	.LASF38:
 1574 013a 47656E65 		.ascii	"Generated_Source\\PSoC5\\SW_CLK.c\000"
 1574      72617465 
 1574      645F536F 
 1574      75726365 
 1574      5C50536F 
 1575              	.LASF29:
 1576 015a 53575F43 		.ascii	"SW_CLK_ClearModeRegister\000"
 1576      4C4B5F43 
 1576      6C656172 
 1576      4D6F6465 
 1576      52656769 
 1577              	.LASF1:
 1578 0173 756E7369 		.ascii	"unsigned char\000"
 1578      676E6564 
 1578      20636861 
 1578      7200
 1579              	.LASF28:
 1580 0181 6D6F6465 		.ascii	"modeBitMask\000"
 1580      4269744D 
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 38


 1580      61736B00 
 1581              	.LASF20:
 1582 018d 53575F43 		.ascii	"SW_CLK_SetDividerRegister\000"
 1582      4C4B5F53 
 1582      65744469 
 1582      76696465 
 1582      72526567 
 1583              	.LASF0:
 1584 01a7 7369676E 		.ascii	"signed char\000"
 1584      65642063 
 1584      68617200 
 1585              	.LASF7:
 1586 01b3 6C6F6E67 		.ascii	"long long unsigned int\000"
 1586      206C6F6E 
 1586      6720756E 
 1586      7369676E 
 1586      65642069 
 1587              	.LASF8:
 1588 01ca 756E7369 		.ascii	"unsigned int\000"
 1588      676E6564 
 1588      20696E74 
 1588      00
 1589              	.LASF27:
 1590 01d7 53575F43 		.ascii	"SW_CLK_SetModeRegister\000"
 1590      4C4B5F53 
 1590      65744D6F 
 1590      64655265 
 1590      67697374 
 1591              	.LASF3:
 1592 01ee 73686F72 		.ascii	"short unsigned int\000"
 1592      7420756E 
 1592      7369676E 
 1592      65642069 
 1592      6E7400
 1593              	.LASF13:
 1594 0201 63686172 		.ascii	"char\000"
 1594      00
 1595              	.LASF4:
 1596 0206 6C6F6E67 		.ascii	"long int\000"
 1596      20696E74 
 1596      00
 1597              	.LASF33:
 1598 020f 636C6B53 		.ascii	"clkSource\000"
 1598      6F757263 
 1598      6500
 1599              	.LASF26:
 1600 0219 63757272 		.ascii	"currSrc\000"
 1600      53726300 
 1601              	.LASF24:
 1602 0221 6F6C6444 		.ascii	"oldDivider\000"
 1602      69766964 
 1602      657200
 1603              	.LASF17:
 1604 022c 53575F43 		.ascii	"SW_CLK_Stop\000"
 1604      4C4B5F53 
 1604      746F7000 
 1605              	.LASF14:
ARM GAS  C:\Users\KJA\AppData\Local\Temp\ccgg0lDX.s 			page 39


 1606 0238 72656738 		.ascii	"reg8\000"
 1606      00
 1607              	.LASF5:
 1608 023d 6C6F6E67 		.ascii	"long unsigned int\000"
 1608      20756E73 
 1608      69676E65 
 1608      6420696E 
 1608      7400
 1609              	.LASF12:
 1610 024f 646F7562 		.ascii	"double\000"
 1610      6C6500
 1611              	.LASF18:
 1612 0256 53575F43 		.ascii	"SW_CLK_StopBlock\000"
 1612      4C4B5F53 
 1612      746F7042 
 1612      6C6F636B 
 1612      00
 1613              	.LASF21:
 1614 0267 73746174 		.ascii	"state\000"
 1614      6500
 1615              	.LASF25:
 1616 026d 656E6162 		.ascii	"enabled\000"
 1616      6C656400 
 1617              	.LASF19:
 1618 0275 53575F43 		.ascii	"SW_CLK_StandbyPower\000"
 1618      4C4B5F53 
 1618      74616E64 
 1618      6279506F 
 1618      77657200 
 1619              	.LASF39:
 1620 0289 443A5C57 		.ascii	"D:\\Workspace\\PSoC_Creator\\Active_Load\\Active_Lo"
 1620      6F726B73 
 1620      70616365 
 1620      5C50536F 
 1620      435F4372 
 1621 02b8 61645F76 		.ascii	"ad_v9.cydsn\000"
 1621      392E6379 
 1621      64736E00 
 1622              	.LASF31:
 1623 02c4 53575F43 		.ascii	"SW_CLK_GetModeRegister\000"
 1623      4C4B5F47 
 1623      65744D6F 
 1623      64655265 
 1623      67697374 
 1624              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
